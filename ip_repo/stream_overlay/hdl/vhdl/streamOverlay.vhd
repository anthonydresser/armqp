-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity streamOverlay is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    B_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    B_TVALID : IN STD_LOGIC;
    B_TREADY : OUT STD_LOGIC;
    B_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    B_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    B_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    B_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    B_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    C_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_TVALID : OUT STD_LOGIC;
    C_TREADY : IN STD_LOGIC;
    C_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    C_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of streamOverlay is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "streamOverlay,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.654000,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=49}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_80EB : STD_LOGIC_VECTOR (15 downto 0) := "1000000011101011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal i_1_fu_163_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal exitcond_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_sig_ioackin_C_TREADY : STD_LOGIC;
    signal i_reg_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ioackin_C_TREADY : STD_LOGIC := '0';
    signal tmp_1_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_C_TREADY assign process. --
    ap_reg_ioackin_C_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_C_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY))))))) then 
                    ap_reg_ioackin_C_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not(ap_sig_bdd_57) and (ap_const_logic_1 = C_TREADY)))) then 
                    ap_reg_ioackin_C_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_146 assign process. --
    i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY)))))) then 
                i_reg_146 <= i_1_fu_163_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                i_reg_146 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_fu_157_p2, ap_sig_bdd_57, ap_sig_ioackin_C_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY)))) and not((exitcond_fu_157_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_157_p2 = ap_const_lv1_0) and not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- A_TREADY assign process. --
    A_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_157_p2, ap_sig_bdd_57, ap_sig_ioackin_C_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY))))))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- B_TREADY assign process. --
    B_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_157_p2, ap_sig_bdd_57, ap_sig_ioackin_C_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not((ap_sig_bdd_57 or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_C_TREADY))))))) then 
            B_TREADY <= ap_const_logic_1;
        else 
            B_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    C_TDATA <= 
        A_TDATA when (tmp_1_fu_173_p2(0) = '1') else 
        B_TDATA;
    C_TDEST <= ap_const_lv6_1;
    C_TID <= ap_const_lv5_0;
    C_TKEEP <= ap_const_lv2_1;
    C_TLAST <= A_TLAST;
    C_TSTRB <= ap_const_lv2_1;
    C_TUSER <= ap_const_lv2_1;

    -- C_TVALID assign process. --
    C_TVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_157_p2, ap_sig_bdd_57, ap_reg_ioackin_C_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_157_p2 = ap_const_lv1_0) and not(ap_sig_bdd_57) and (ap_const_logic_0 = ap_reg_ioackin_C_TREADY)))) then 
            C_TVALID <= ap_const_logic_1;
        else 
            C_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_46 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(A_TVALID, B_TVALID, exitcond_fu_157_p2)
    begin
                ap_sig_bdd_57 <= (((B_TVALID = ap_const_logic_0) and (exitcond_fu_157_p2 = ap_const_lv1_0)) or ((exitcond_fu_157_p2 = ap_const_lv1_0) and (A_TVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_72 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_72)
    begin
        if (ap_sig_bdd_72) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_46)
    begin
        if (ap_sig_bdd_46) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_C_TREADY assign process. --
    ap_sig_ioackin_C_TREADY_assign_proc : process(C_TREADY, ap_reg_ioackin_C_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_C_TREADY)) then 
            ap_sig_ioackin_C_TREADY <= C_TREADY;
        else 
            ap_sig_ioackin_C_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_157_p2 <= "1" when (i_reg_146 = ap_const_lv10_280) else "0";
    i_1_fu_163_p2 <= std_logic_vector(unsigned(i_reg_146) + unsigned(ap_const_lv10_1));
    tmp_1_fu_173_p2 <= "1" when (unsigned(B_TDATA) < unsigned(ap_const_lv16_80EB)) else "0";
end behav;
