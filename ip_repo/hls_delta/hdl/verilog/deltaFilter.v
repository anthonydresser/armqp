// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="deltaFilter,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.123750,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=79}" *)

module deltaFilter (
        ap_clk,
        ap_rst_n,
        videoInA_TDATA,
        videoInA_TVALID,
        videoInA_TREADY,
        videoInA_TKEEP,
        videoInA_TSTRB,
        videoInA_TUSER,
        videoInA_TLAST,
        videoInA_TID,
        videoInA_TDEST,
        videoInB_TDATA,
        videoInB_TVALID,
        videoInB_TREADY,
        videoInB_TKEEP,
        videoInB_TSTRB,
        videoInB_TUSER,
        videoInB_TLAST,
        videoInB_TID,
        videoInB_TDEST,
        videoOut_TDATA,
        videoOut_TVALID,
        videoOut_TREADY,
        videoOut_TKEEP,
        videoOut_TSTRB,
        videoOut_TUSER,
        videoOut_TLAST,
        videoOut_TID,
        videoOut_TDEST
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv10_280 = 10'b1010000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv16_8000 = 16'b1000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [15:0] videoInA_TDATA;
input   videoInA_TVALID;
output   videoInA_TREADY;
input  [1:0] videoInA_TKEEP;
input  [1:0] videoInA_TSTRB;
input  [1:0] videoInA_TUSER;
input  [0:0] videoInA_TLAST;
input  [4:0] videoInA_TID;
input  [5:0] videoInA_TDEST;
input  [15:0] videoInB_TDATA;
input   videoInB_TVALID;
output   videoInB_TREADY;
input  [1:0] videoInB_TKEEP;
input  [1:0] videoInB_TSTRB;
input  [1:0] videoInB_TUSER;
input  [0:0] videoInB_TLAST;
input  [4:0] videoInB_TID;
input  [5:0] videoInB_TDEST;
output  [15:0] videoOut_TDATA;
output   videoOut_TVALID;
input   videoOut_TREADY;
output  [1:0] videoOut_TKEEP;
output  [1:0] videoOut_TSTRB;
output  [1:0] videoOut_TUSER;
output  [0:0] videoOut_TLAST;
output  [4:0] videoOut_TID;
output  [5:0] videoOut_TDEST;

reg videoInA_TREADY;
reg videoInB_TREADY;
reg videoOut_TVALID;
reg    ap_rst_n_inv;
wire   [9:0] i_1_fu_165_p2;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_46;
wire   [0:0] exitcond_fu_159_p2;
reg    ap_sig_bdd_57;
reg    ap_sig_ioackin_videoOut_TREADY;
reg   [9:0] i_reg_148;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_72;
reg    ap_reg_ioackin_videoOut_TREADY = 1'b0;
wire   [7:0] r_V_fu_180_p1;
wire   [7:0] r_V_1_fu_192_p1;
wire   [8:0] r_V_cast_fu_184_p1;
wire   [8:0] r_V_1_cast_fu_196_p1;
wire   [8:0] tmp_1_fu_200_p2;
wire   [0:0] abscond_fu_206_p2;
wire   [8:0] tmp_3_fu_212_p2;
wire   [8:0] tmp_4_fu_218_p3;
wire  signed [15:0] tmp_4_cast_fu_226_p1;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_videoOut_TREADY assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_videoOut_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
            ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~ap_sig_bdd_57 & (ap_const_logic_1 == videoOut_TREADY))) begin
            ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
        i_reg_148 <= i_1_fu_165_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_reg_148 <= ap_const_lv10_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_72) begin
    if (ap_sig_bdd_72) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_46) begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_videoOut_TREADY assign process. ///
always @ (videoOut_TREADY or ap_reg_ioackin_videoOut_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_videoOut_TREADY)) begin
        ap_sig_ioackin_videoOut_TREADY = videoOut_TREADY;
    end else begin
        ap_sig_ioackin_videoOut_TREADY = ap_const_logic_1;
    end
end

/// videoInA_TREADY assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_159_p2 or ap_sig_bdd_57 or ap_sig_ioackin_videoOut_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
        videoInA_TREADY = ap_const_logic_1;
    end else begin
        videoInA_TREADY = ap_const_logic_0;
    end
end

/// videoInB_TREADY assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_159_p2 or ap_sig_bdd_57 or ap_sig_ioackin_videoOut_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
        videoInB_TREADY = ap_const_logic_1;
    end else begin
        videoInB_TREADY = ap_const_logic_0;
    end
end

/// videoOut_TVALID assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_159_p2 or ap_sig_bdd_57 or ap_reg_ioackin_videoOut_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_159_p2 == ap_const_lv1_0) & ~ap_sig_bdd_57 & (ap_const_logic_0 == ap_reg_ioackin_videoOut_TREADY))) begin
        videoOut_TVALID = ap_const_logic_1;
    end else begin
        videoOut_TVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_159_p2 or ap_sig_bdd_57 or ap_sig_ioackin_videoOut_TREADY) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))) & ~(exitcond_fu_159_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_159_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_57 | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abscond_fu_206_p2 = ($signed(tmp_1_fu_200_p2) > $signed(9'b000000000)? 1'b1: 1'b0);

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_46 = (ap_CS_fsm[ap_const_lv32_1] == ap_const_lv1_1);
end

/// ap_sig_bdd_57 assign process. ///
always @ (videoInA_TVALID or videoInB_TVALID or exitcond_fu_159_p2) begin
    ap_sig_bdd_57 = (((videoInA_TVALID == ap_const_logic_0) & (exitcond_fu_159_p2 == ap_const_lv1_0)) | ((exitcond_fu_159_p2 == ap_const_lv1_0) & (videoInB_TVALID == ap_const_logic_0)));
end

/// ap_sig_bdd_72 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_72 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_0]);
end
assign exitcond_fu_159_p2 = (i_reg_148 == ap_const_lv10_280? 1'b1: 1'b0);
assign i_1_fu_165_p2 = (i_reg_148 + ap_const_lv10_1);
assign r_V_1_cast_fu_196_p1 = r_V_1_fu_192_p1;
assign r_V_1_fu_192_p1 = videoInB_TDATA[7:0];
assign r_V_cast_fu_184_p1 = r_V_fu_180_p1;
assign r_V_fu_180_p1 = videoInA_TDATA[7:0];
assign tmp_1_fu_200_p2 = (r_V_cast_fu_184_p1 - r_V_1_cast_fu_196_p1);
assign tmp_3_fu_212_p2 = (ap_const_lv9_0 - tmp_1_fu_200_p2);
assign tmp_4_cast_fu_226_p1 = $signed(tmp_4_fu_218_p3);
assign tmp_4_fu_218_p3 = ((abscond_fu_206_p2[0:0] === 1'b1) ? tmp_1_fu_200_p2 : tmp_3_fu_212_p2);
assign videoOut_TDATA = (tmp_4_cast_fu_226_p1 | ap_const_lv16_8000);
assign videoOut_TDEST = ap_const_lv6_1;
assign videoOut_TID = ap_const_lv5_0;
assign videoOut_TKEEP = ap_const_lv2_1;
assign videoOut_TLAST = videoInA_TLAST;
assign videoOut_TSTRB = ap_const_lv2_1;
assign videoOut_TUSER = ap_const_lv2_1;


endmodule //deltaFilter

