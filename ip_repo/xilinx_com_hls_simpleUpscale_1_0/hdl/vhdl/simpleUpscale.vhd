-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simpleUpscale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    videoIn_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    videoIn_TVALID : IN STD_LOGIC;
    videoIn_TREADY : OUT STD_LOGIC;
    videoIn_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    videoIn_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    videoIn_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    videoIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    videoIn_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    videoIn_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    videoOut_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    videoOut_TVALID : OUT STD_LOGIC;
    videoOut_TREADY : IN STD_LOGIC;
    videoOut_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    videoOut_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    videoOut_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    videoOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    videoOut_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    videoOut_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of simpleUpscale is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simpleUpscale,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.700000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.089000,HLS_SYN_LAT=1923,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=207}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_280 : STD_LOGIC_VECTOR (10 downto 0) := "01010000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_77F : STD_LOGIC_VECTOR (10 downto 0) := "11101111111";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_437 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000110111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal linenum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal linenum_load_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_41 : BOOLEAN;
    signal tmp_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_53 : BOOLEAN;
    signal ap_sig_ioackin_videoOut_TREADY : STD_LOGIC;
    signal i_3_fu_196_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_215_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal exitcond1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal i_4_fu_264_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal exitcond2_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_146 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_168 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_s_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal tmp_4_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_videoOut_TREADY : STD_LOGIC := '0';
    signal tmp_s_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_videoOut_TREADY assign process. --
    ap_reg_ioackin_videoOut_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0) and not(((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2))))))) then 
                    ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = videoOut_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77) and (ap_const_logic_1 = videoOut_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2) and (ap_const_logic_1 = videoOut_TREADY)))) then 
                    ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_168 assign process. --
    i_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2)))) and not((ap_const_lv1_0 = exitcond1_fu_209_p2)))) then 
                i_1_reg_168 <= ap_const_lv11_280;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2))))) then 
                i_1_reg_168 <= i_4_fu_264_p2;
            end if; 
        end if;
    end process;

    -- i_2_reg_146 assign process. --
    i_2_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (tmp_fu_184_p2 = ap_const_lv1_0))) then 
                i_2_reg_146 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0) and not(((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY))))) then 
                i_2_reg_146 <= i_3_fu_196_p2;
            end if; 
        end if;
    end process;

    -- i_reg_157 assign process. --
    i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((tmp_fu_184_p2 = ap_const_lv1_0)))) then 
                i_reg_157 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2)))))) then 
                i_reg_157 <= tmp_2_fu_215_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY))))) then
                exitcond_reg_302 <= exitcond_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                linenum <= p_s_fu_280_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                linenum_load_reg_293 <= linenum;
                tmp_reg_298 <= tmp_fu_184_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2))) and (((tmp_reg_298 = ap_const_lv1_0) and not((exitcond_reg_302 = ap_const_lv1_0))) or (not((tmp_reg_298 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond2_fu_251_p2)))))) then
                tmp_9_reg_327 <= tmp_9_fu_270_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_fu_184_p2, tmp_reg_298, exitcond_fu_190_p2, exitcond_reg_302, ap_sig_ioackin_videoOut_TREADY, exitcond1_fu_209_p2, ap_sig_bdd_77, exitcond2_fu_251_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((tmp_fu_184_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((exitcond_fu_190_p2 = ap_const_lv1_0) and not(((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY))) and not((exitcond_fu_190_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = exitcond1_fu_209_p2) and not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2)))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2)))) and not((ap_const_lv1_0 = exitcond1_fu_209_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2))))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif ((not(((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2))) and (((tmp_reg_298 = ap_const_lv1_0) and not((exitcond_reg_302 = ap_const_lv1_0))) or (not((tmp_reg_298 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond2_fu_251_p2)))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_41 assign process. --
    ap_sig_bdd_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_41 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_53 assign process. --
    ap_sig_bdd_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_53 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(videoIn_TVALID, exitcond1_fu_209_p2)
    begin
                ap_sig_bdd_77 <= ((videoIn_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_fu_209_p2));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_41)
    begin
        if (ap_sig_bdd_41) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_53)
    begin
        if (ap_sig_bdd_53) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_videoOut_TREADY assign process. --
    ap_sig_ioackin_videoOut_TREADY_assign_proc : process(videoOut_TREADY, ap_reg_ioackin_videoOut_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_videoOut_TREADY)) then 
            ap_sig_ioackin_videoOut_TREADY <= videoOut_TREADY;
        else 
            ap_sig_ioackin_videoOut_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_209_p2 <= "1" when (i_reg_157 = ap_const_lv10_280) else "0";
    exitcond2_fu_251_p2 <= "1" when (i_1_reg_168 = ap_const_lv11_780) else "0";
    exitcond_fu_190_p2 <= "1" when (i_2_reg_146 = ap_const_lv11_780) else "0";
    i_3_fu_196_p2 <= std_logic_vector(unsigned(i_2_reg_146) + unsigned(ap_const_lv11_1));
    i_4_fu_264_p2 <= std_logic_vector(unsigned(i_1_reg_168) + unsigned(ap_const_lv11_1));
    p_s_fu_280_p3 <= 
        ap_const_lv32_0 when (tmp_s_fu_275_p2(0) = '1') else 
        tmp_9_reg_327;
    tmp_2_fu_215_p2 <= std_logic_vector(unsigned(i_reg_157) + unsigned(ap_const_lv10_1));
    tmp_4_fu_202_p2 <= "1" when (i_2_reg_146 = ap_const_lv11_77F) else "0";
    tmp_7_fu_257_p2 <= "1" when (i_1_reg_168 = ap_const_lv11_77F) else "0";
    tmp_9_fu_270_p2 <= std_logic_vector(unsigned(linenum_load_reg_293) + unsigned(ap_const_lv32_1));
    tmp_fu_184_p2 <= "1" when (signed(linenum) < signed(ap_const_lv32_1E0)) else "0";
    tmp_s_fu_275_p2 <= "1" when (signed(tmp_9_reg_327) > signed(ap_const_lv32_437)) else "0";

    -- videoIn_TREADY assign process. --
    videoIn_TREADY_assign_proc : process(ap_sig_ioackin_videoOut_TREADY, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not((ap_sig_bdd_77 or ((ap_const_logic_0 = ap_sig_ioackin_videoOut_TREADY) and (ap_const_lv1_0 = exitcond1_fu_209_p2))))))) then 
            videoIn_TREADY <= ap_const_logic_1;
        else 
            videoIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- videoOut_TDATA assign process. --
    videoOut_TDATA_assign_proc : process(videoIn_TDATA, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TDATA <= videoIn_TDATA;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TDATA <= ap_const_lv16_0;
        else 
            videoOut_TDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- videoOut_TDEST assign process. --
    videoOut_TDEST_assign_proc : process(videoIn_TDEST, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TDEST <= videoIn_TDEST;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TDEST <= ap_const_lv6_1;
        else 
            videoOut_TDEST <= "XXXXXX";
        end if; 
    end process;


    -- videoOut_TID assign process. --
    videoOut_TID_assign_proc : process(videoIn_TID, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TID <= videoIn_TID;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TID <= ap_const_lv5_0;
        else 
            videoOut_TID <= "XXXXX";
        end if; 
    end process;


    -- videoOut_TKEEP assign process. --
    videoOut_TKEEP_assign_proc : process(videoIn_TKEEP, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TKEEP <= videoIn_TKEEP;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TKEEP <= ap_const_lv2_1;
        else 
            videoOut_TKEEP <= "XX";
        end if; 
    end process;


    -- videoOut_TLAST assign process. --
    videoOut_TLAST_assign_proc : process(tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2, tmp_4_fu_202_p2, tmp_7_fu_257_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2))) then 
            videoOut_TLAST <= tmp_7_fu_257_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TLAST <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0))) then 
            videoOut_TLAST <= tmp_4_fu_202_p2;
        else 
            videoOut_TLAST <= "X";
        end if; 
    end process;


    -- videoOut_TSTRB assign process. --
    videoOut_TSTRB_assign_proc : process(videoIn_TSTRB, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TSTRB <= videoIn_TSTRB;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TSTRB <= ap_const_lv2_1;
        else 
            videoOut_TSTRB <= "XX";
        end if; 
    end process;


    -- videoOut_TUSER assign process. --
    videoOut_TUSER_assign_proc : process(videoIn_TUSER, tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77))) then 
            videoOut_TUSER <= videoIn_TUSER;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2)))) then 
            videoOut_TUSER <= ap_const_lv2_1;
        else 
            videoOut_TUSER <= "XX";
        end if; 
    end process;


    -- videoOut_TVALID assign process. --
    videoOut_TVALID_assign_proc : process(tmp_reg_298, exitcond_fu_190_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_209_p2, ap_sig_bdd_77, ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_251_p2, ap_reg_ioackin_videoOut_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_videoOut_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_209_p2) and not(ap_sig_bdd_77) and (ap_const_logic_0 = ap_reg_ioackin_videoOut_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_reg_298 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond2_fu_251_p2) and (ap_const_logic_0 = ap_reg_ioackin_videoOut_TREADY)))) then 
            videoOut_TVALID <= ap_const_logic_1;
        else 
            videoOut_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
