-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity barrel_Math is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    translateIn_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    translateIn_V_ap_vld : OUT STD_LOGIC;
    translateOut_V : IN STD_LOGIC_VECTOR (31 downto 0);
    translateOut_V_ap_vld : IN STD_LOGIC;
    rotateCin_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    rotateCin_V_ap_vld : OUT STD_LOGIC;
    rotatePIn_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    rotatePIn_V_ap_vld : OUT STD_LOGIC;
    rotateOut_V : IN STD_LOGIC_VECTOR (31 downto 0);
    rotateOut_V_ap_vld : IN STD_LOGIC;
    xOut_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    xOut_V_ap_vld : OUT STD_LOGIC;
    yOut_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    yOut_V_ap_vld : OUT STD_LOGIC;
    currentLine_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    currentLine_V_ap_vld : OUT STD_LOGIC;
    dataIn_V : IN STD_LOGIC_VECTOR (15 downto 0);
    dataInValid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    masterReady_V : IN STD_LOGIC_VECTOR (0 downto 0);
    rotateReadyIn_V : IN STD_LOGIC_VECTOR (0 downto 0);
    masterReadyOut_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    rUserIn_V : OUT STD_LOGIC_VECTOR (21 downto 0);
    rUserOut_V : IN STD_LOGIC_VECTOR (21 downto 0);
    tUserIn_V : OUT STD_LOGIC_VECTOR (21 downto 0);
    tUserOut_V : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of barrel_Math is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "barrel_Math,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.734007,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=348,HLS_SYN_LUT=263}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_436 : STD_LOGIC_VECTOR (10 downto 0) := "10000110110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_3BE : STD_LOGIC_VECTOR (10 downto 0) := "01110111110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

    signal translateOut_V_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal translateOut_V_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal translateOut_V_ap_vld_in_sig : STD_LOGIC;
    signal translateOut_V_ap_vld_preg : STD_LOGIC := '0';
    signal rotateOut_V_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal rotateOut_V_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rotateOut_V_ap_vld_in_sig : STD_LOGIC;
    signal rotateOut_V_ap_vld_preg : STD_LOGIC := '0';
    signal y_V : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal x_V : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal masterReady_V_read_read_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_ap_start : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_ap_done : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_ap_idle : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_ap_ready : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_translateOut_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_rotateCin_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_rotateReady_V : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_rUserIn_V : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_rUserIn_V_ap_vld : STD_LOGIC;
    signal grp_barrel_Math_getNewRadius_fu_186_tUserOut_V : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal p_tmp_4_cast_fu_268_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_250_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_254_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_tmp_4_fu_260_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_294_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_64 : BOOLEAN;
    signal ap_sig_bdd_91 : BOOLEAN;

    component barrel_Math_getNewRadius IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        translateOut_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rotateCin_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rotateCin_V_ap_vld : OUT STD_LOGIC;
        rotatePIn_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        rotatePIn_V_ap_vld : OUT STD_LOGIC;
        rotateReady_V : IN STD_LOGIC_VECTOR (0 downto 0);
        rUserIn_V : OUT STD_LOGIC_VECTOR (21 downto 0);
        rUserIn_V_ap_vld : OUT STD_LOGIC;
        tUserOut_V : IN STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    grp_barrel_Math_getNewRadius_fu_186 : component barrel_Math_getNewRadius
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_barrel_Math_getNewRadius_fu_186_ap_start,
        ap_done => grp_barrel_Math_getNewRadius_fu_186_ap_done,
        ap_idle => grp_barrel_Math_getNewRadius_fu_186_ap_idle,
        ap_ready => grp_barrel_Math_getNewRadius_fu_186_ap_ready,
        translateOut_V => grp_barrel_Math_getNewRadius_fu_186_translateOut_V,
        rotateCin_V => grp_barrel_Math_getNewRadius_fu_186_rotateCin_V,
        rotateCin_V_ap_vld => grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld,
        rotatePIn_V => grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V,
        rotatePIn_V_ap_vld => grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld,
        rotateReady_V => grp_barrel_Math_getNewRadius_fu_186_rotateReady_V,
        rUserIn_V => grp_barrel_Math_getNewRadius_fu_186_rUserIn_V,
        rUserIn_V_ap_vld => grp_barrel_Math_getNewRadius_fu_186_rUserIn_V_ap_vld,
        tUserOut_V => grp_barrel_Math_getNewRadius_fu_186_tUserOut_V);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg assign process. --
    grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)))) then 
                    grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_barrel_Math_getNewRadius_fu_186_ap_ready)) then 
                    grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- rotateOut_V_ap_vld_preg assign process. --
    rotateOut_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rotateOut_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_barrel_Math_getNewRadius_fu_186_ap_done))))) then 
                    rotateOut_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = rotateOut_V_ap_vld)) then 
                    rotateOut_V_ap_vld_preg <= rotateOut_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- rotateOut_V_preg assign process. --
    rotateOut_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rotateOut_V_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = rotateOut_V_ap_vld)) then 
                    rotateOut_V_preg <= rotateOut_V;
                end if; 
            end if;
        end if;
    end process;


    -- translateOut_V_ap_vld_preg assign process. --
    translateOut_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                translateOut_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_barrel_Math_getNewRadius_fu_186_ap_done))))) then 
                    translateOut_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = translateOut_V_ap_vld)) then 
                    translateOut_V_ap_vld_preg <= translateOut_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    -- translateOut_V_preg assign process. --
    translateOut_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                translateOut_V_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = translateOut_V_ap_vld)) then 
                    translateOut_V_preg <= translateOut_V;
                end if; 
            end if;
        end if;
    end process;


    -- x_V assign process. --
    x_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_91) then
                if (not((ap_const_lv1_0 = tmp_1_fu_220_p2))) then 
                    x_V <= ap_const_lv11_0;
                elsif ((ap_const_lv1_0 = tmp_1_fu_220_p2)) then 
                    x_V <= tmp_3_fu_226_p2;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_1_fu_220_p2)))) then
                    y_V(9 downto 0) <= p_tmp_4_cast_fu_268_p1(9 downto 0);
            end if;
        end if;
    end process;
    y_V(10) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2, grp_barrel_Math_getNewRadius_fu_186_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_61)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_barrel_Math_getNewRadius_fu_186_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(translateOut_V_ap_vld_in_sig, rotateOut_V_ap_vld_in_sig)
    begin
                ap_sig_bdd_61 <= ((rotateOut_V_ap_vld_in_sig = ap_const_logic_0) or (translateOut_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61)
    begin
                ap_sig_bdd_64 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2)
    begin
                ap_sig_bdd_91 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    currentLine_V <= std_logic_vector(resize(unsigned(tmp_6_fu_294_p4),16));

    -- currentLine_V_ap_vld assign process. --
    currentLine_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)))) then 
            currentLine_V_ap_vld <= ap_const_logic_1;
        else 
            currentLine_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_barrel_Math_getNewRadius_fu_186_ap_start <= grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg;
    grp_barrel_Math_getNewRadius_fu_186_rotateReady_V <= rotateReadyIn_V;
    grp_barrel_Math_getNewRadius_fu_186_tUserOut_V <= tUserOut_V;
    grp_barrel_Math_getNewRadius_fu_186_translateOut_V <= translateOut_V_in_sig;

    -- masterReadyOut_V assign process. --
    masterReadyOut_V_assign_proc : process(masterReady_V_read_read_fu_124_p2, ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then
            if (not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0))) then 
                masterReadyOut_V <= ap_const_lv1_1;
            elsif ((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)) then 
                masterReadyOut_V <= ap_const_lv1_0;
            else 
                masterReadyOut_V <= "X";
            end if;
        else 
            masterReadyOut_V <= "X";
        end if; 
    end process;

    masterReady_V_read_read_fu_124_p2 <= masterReady_V;
    p_tmp_4_cast_fu_268_p1 <= std_logic_vector(resize(unsigned(p_tmp_4_fu_260_p3),11));
    p_tmp_4_fu_260_p3 <= 
        ap_const_lv10_0 when (tmp_2_fu_244_p2(0) = '1') else 
        tmp_4_cast_fu_254_p2;
    rUserIn_V <= grp_barrel_Math_getNewRadius_fu_186_rUserIn_V;
    rotateCin_V <= grp_barrel_Math_getNewRadius_fu_186_rotateCin_V;
    rotateCin_V_ap_vld <= grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld;

    -- rotateOut_V_ap_vld_in_sig assign process. --
    rotateOut_V_ap_vld_in_sig_assign_proc : process(rotateOut_V_ap_vld, rotateOut_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = rotateOut_V_ap_vld)) then 
            rotateOut_V_ap_vld_in_sig <= rotateOut_V_ap_vld;
        else 
            rotateOut_V_ap_vld_in_sig <= rotateOut_V_ap_vld_preg;
        end if; 
    end process;


    -- rotateOut_V_in_sig assign process. --
    rotateOut_V_in_sig_assign_proc : process(rotateOut_V, rotateOut_V_preg, rotateOut_V_ap_vld)
    begin
        if ((ap_const_logic_1 = rotateOut_V_ap_vld)) then 
            rotateOut_V_in_sig <= rotateOut_V;
        else 
            rotateOut_V_in_sig <= rotateOut_V_preg;
        end if; 
    end process;

    rotatePIn_V <= grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V;
    rotatePIn_V_ap_vld <= grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld;
    tUserIn_V <= std_logic_vector(resize(unsigned(x_V),22));
    tmp_1_fu_220_p2 <= "1" when (unsigned(x_V) > unsigned(ap_const_lv11_436)) else "0";
    tmp_2_fu_244_p2 <= "1" when (unsigned(y_V) > unsigned(ap_const_lv11_3BE)) else "0";
    tmp_3_fu_226_p2 <= std_logic_vector(unsigned(x_V) + unsigned(ap_const_lv11_1));
    tmp_4_cast_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(tmp_4_fu_250_p1));
    tmp_4_fu_250_p1 <= y_V(10 - 1 downto 0);
    tmp_6_fu_294_p4 <= rUserOut_V(21 downto 11);
    translateIn_V <= std_logic_vector(resize(unsigned(x_V),32));

    -- translateIn_V_ap_vld assign process. --
    translateIn_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)))) then 
            translateIn_V_ap_vld <= ap_const_logic_1;
        else 
            translateIn_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- translateOut_V_ap_vld_in_sig assign process. --
    translateOut_V_ap_vld_in_sig_assign_proc : process(translateOut_V_ap_vld, translateOut_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = translateOut_V_ap_vld)) then 
            translateOut_V_ap_vld_in_sig <= translateOut_V_ap_vld;
        else 
            translateOut_V_ap_vld_in_sig <= translateOut_V_ap_vld_preg;
        end if; 
    end process;


    -- translateOut_V_in_sig assign process. --
    translateOut_V_in_sig_assign_proc : process(translateOut_V, translateOut_V_preg, translateOut_V_ap_vld)
    begin
        if ((ap_const_logic_1 = translateOut_V_ap_vld)) then 
            translateOut_V_in_sig <= translateOut_V;
        else 
            translateOut_V_in_sig <= translateOut_V_preg;
        end if; 
    end process;

    xOut_V <= rotateOut_V_in_sig(11 - 1 downto 0);

    -- xOut_V_ap_vld assign process. --
    xOut_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)))) then 
            xOut_V_ap_vld <= ap_const_logic_1;
        else 
            xOut_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    yOut_V <= rotateOut_V_in_sig(26 downto 16);

    -- yOut_V_ap_vld assign process. --
    yOut_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_61, masterReady_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_61) and not((masterReady_V_read_read_fu_124_p2 = ap_const_lv1_0)))) then 
            yOut_V_ap_vld <= ap_const_logic_1;
        else 
            yOut_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
