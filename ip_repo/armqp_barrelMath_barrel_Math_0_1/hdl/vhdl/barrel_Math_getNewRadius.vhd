-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity barrel_Math_getNewRadius is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    translateOut_V : IN STD_LOGIC_VECTOR (31 downto 0);
    rotateCin_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    rotateCin_V_ap_vld : OUT STD_LOGIC;
    rotatePIn_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    rotatePIn_V_ap_vld : OUT STD_LOGIC;
    rotateReady_V : IN STD_LOGIC_VECTOR (0 downto 0);
    rUserIn_V : OUT STD_LOGIC_VECTOR (21 downto 0);
    rUserIn_V_ap_vld : OUT STD_LOGIC;
    tUserOut_V : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of barrel_Math_getNewRadius is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv49_1011F41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000010001111101000001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv26_EE6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000111011100110";
    constant ap_const_lv22_3FFF72 : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111101110010";
    constant ap_const_lv16_1000 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv28_FFFF4FB : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111010011111011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal ret_V_1_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal radius_V_fu_153_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal radius_V_reg_451 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_6_reg_456 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_70 : BOOLEAN;
    signal p_Val2_s_fu_208_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_466 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal p_Val2_8_fu_222_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_8_reg_472 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_9_reg_489 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_7_reg_494 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_2_cast2_fu_260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_cast2_reg_499 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal tmp_8_reg_504 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_127 : BOOLEAN;
    signal OP2_V_5_cast_fu_326_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal OP2_V_5_cast_reg_524 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_reg_530 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_138 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_147 : BOOLEAN;
    signal tmp_3_reg_550 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal tmp_1_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal rotateReady_V_read_read_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal tmp_fu_149_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_161_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl5_fu_173_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_189_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_2_cast_fu_218_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_6_fu_231_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_3_fu_238_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_fu_263_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_10_cast_fu_301_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_4_fu_304_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_376_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_10_fu_383_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_405_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_411_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_202_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_348_ce : STD_LOGIC;
    signal grp_fu_360_ce : STD_LOGIC;
    signal grp_fu_405_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_202_p10 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_248_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_254_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_317_p00 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_317_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_329_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_329_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_348_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_360_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_360_p10 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_405_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_429_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_438_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_438_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_438_p20 : STD_LOGIC_VECTOR (35 downto 0);

    component barrel_Math_mul_26ns_24ns_49_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component barrel_Math_mul_13ns_14ns_26_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component barrel_Math_mul_9s_13ns_22_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component barrel_Math_mul_16ns_26ns_42_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component barrel_Math_mul_13ns_16ns_28_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component barrel_Math_mul_16ns_42ns_52_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component barrel_Math_mul_16ns_16ns_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component barrel_Math_mac_muladd_13s_16ns_28ns_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component barrel_Math_am_addmul_19ns_17ns_16ns_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    barrel_Math_mul_26ns_24ns_49_5_U0 : component barrel_Math_mul_26ns_24ns_49_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 26,
        din1_WIDTH => 24,
        dout_WIDTH => 49)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);

    barrel_Math_mul_13ns_14ns_26_3_U1 : component barrel_Math_mul_13ns_14ns_26_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 13,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    barrel_Math_mul_9s_13ns_22_3_U2 : component barrel_Math_mul_9s_13ns_22_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    barrel_Math_mul_16ns_26ns_42_5_U3 : component barrel_Math_mul_16ns_26ns_42_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    barrel_Math_mul_13ns_16ns_28_3_U4 : component barrel_Math_mul_13ns_16ns_28_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    barrel_Math_mul_13ns_16ns_28_3_U5 : component barrel_Math_mul_13ns_16ns_28_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p2);

    barrel_Math_mul_16ns_42ns_52_5_U6 : component barrel_Math_mul_16ns_42ns_52_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 42,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => grp_fu_360_ce,
        dout => grp_fu_360_p2);

    barrel_Math_mul_16ns_16ns_32_3_U7 : component barrel_Math_mul_16ns_16ns_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_405_p0,
        din1 => grp_fu_405_p1,
        ce => grp_fu_405_ce,
        dout => grp_fu_405_p2);

    barrel_Math_mac_muladd_13s_16ns_28ns_28_1_U8 : component barrel_Math_mac_muladd_13s_16ns_28ns_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        din2 => grp_fu_429_p2,
        dout => grp_fu_429_p3);

    barrel_Math_am_addmul_19ns_17ns_16ns_36_1_U9 : component barrel_Math_am_addmul_19ns_17ns_16ns_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 17,
        din2_WIDTH => 16,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        din2 => grp_fu_438_p2,
        dout => grp_fu_438_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                    OP2_V_5_cast_reg_524(12 downto 0) <= OP2_V_5_cast_fu_326_p1(12 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                p_Val2_11_reg_579 <= grp_fu_405_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                p_Val2_2_cast2_reg_499 <= p_Val2_2_cast2_fu_260_p1;
                tmp_8_reg_504 <= grp_fu_429_p3(27 downto 12);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                p_Val2_7_reg_494 <= grp_fu_254_p2;
                p_Val2_9_reg_489 <= grp_fu_248_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p_Val2_8_reg_472 <= p_Val2_8_fu_222_p2;
                p_Val2_s_reg_466 <= grp_fu_202_p2(48 downto 43);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                r_V_6_reg_456 <= grp_fu_438_p3;
                    radius_V_reg_451(15 downto 12) <= radius_V_fu_153_p3(15 downto 12);
                ret_V_1_reg_446 <= translateOut_V(19 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                tmp_1_reg_555 <= p_Val2_10_fu_383_p2(51 downto 36);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_3_reg_550 <= grp_fu_348_p2(27 downto 12);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_s_reg_530 <= grp_fu_329_p2(27 downto 12);
            end if;
        end if;
    end process;
    radius_V_reg_451(11 downto 0) <= "000000000000";
    OP2_V_5_cast_reg_524(27 downto 13) <= "000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, rotateReady_V_read_read_fu_112_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if (not((rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    OP2_V_5_cast_fu_326_p1 <= std_logic_vector(resize(unsigned(p_Val2_8_reg_472),28));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, rotateReady_V_read_read_fu_112_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(rotateReady_V_read_read_fu_112_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_127 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_138 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_147 assign process. --
    ap_sig_bdd_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_147 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_70 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_127)
    begin
        if (ap_sig_bdd_127) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_147)
    begin
        if (ap_sig_bdd_147) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_202_ce <= ap_const_logic_1;
    grp_fu_202_p0 <= ap_const_lv49_1011F41(26 - 1 downto 0);
    grp_fu_202_p1 <= grp_fu_202_p10(24 - 1 downto 0);
    grp_fu_202_p10 <= std_logic_vector(resize(unsigned(tmp_7_fu_189_p4),49));
    grp_fu_248_ce <= ap_const_logic_1;
    grp_fu_248_p0 <= ap_const_lv26_EE6(13 - 1 downto 0);
    grp_fu_248_p1 <= grp_fu_248_p10(14 - 1 downto 0);
    grp_fu_248_p10 <= std_logic_vector(resize(unsigned(r_V_3_fu_238_p2),26));
    grp_fu_254_ce <= ap_const_logic_1;
    grp_fu_254_p0 <= ap_const_lv22_3FFF72(9 - 1 downto 0);
    grp_fu_254_p1 <= grp_fu_254_p10(13 - 1 downto 0);
    grp_fu_254_p10 <= std_logic_vector(resize(unsigned(p_Val2_8_reg_472),22));
    grp_fu_317_ce <= ap_const_logic_1;
    grp_fu_317_p0 <= grp_fu_317_p00(16 - 1 downto 0);
    grp_fu_317_p00 <= std_logic_vector(resize(unsigned(p_Val2_2_cast2_fu_260_p1),42));
    grp_fu_317_p1 <= grp_fu_317_p10(26 - 1 downto 0);
    grp_fu_317_p10 <= std_logic_vector(resize(unsigned(r_V_4_fu_304_p2),42));
    grp_fu_329_ce <= ap_const_logic_1;
    grp_fu_329_p0 <= grp_fu_329_p00(13 - 1 downto 0);
    grp_fu_329_p00 <= std_logic_vector(resize(unsigned(p_Val2_8_reg_472),28));
    grp_fu_329_p1 <= grp_fu_329_p10(16 - 1 downto 0);
    grp_fu_329_p10 <= std_logic_vector(resize(unsigned(tmp_8_reg_504),28));
    grp_fu_348_ce <= ap_const_logic_1;
    grp_fu_348_p0 <= OP2_V_5_cast_reg_524(13 - 1 downto 0);
    grp_fu_348_p1 <= grp_fu_348_p10(16 - 1 downto 0);
    grp_fu_348_p10 <= std_logic_vector(resize(unsigned(tmp_s_reg_530),28));
    grp_fu_360_ce <= ap_const_logic_1;
    grp_fu_360_p0 <= grp_fu_360_p00(16 - 1 downto 0);
    grp_fu_360_p00 <= std_logic_vector(resize(unsigned(p_Val2_2_cast2_reg_499),52));
    grp_fu_360_p1 <= grp_fu_360_p10(42 - 1 downto 0);
    grp_fu_360_p10 <= std_logic_vector(resize(unsigned(grp_fu_317_p2),52));
    grp_fu_405_ce <= ap_const_logic_1;
    grp_fu_405_p0 <= grp_fu_405_p00(16 - 1 downto 0);
    grp_fu_405_p00 <= std_logic_vector(resize(unsigned(radius_V_reg_451),32));
    grp_fu_405_p1 <= grp_fu_405_p10(16 - 1 downto 0);
    grp_fu_405_p10 <= std_logic_vector(resize(unsigned(tmp_1_reg_555),32));
    grp_fu_429_p0 <= ap_const_lv28_FFFF4FB(13 - 1 downto 0);
    grp_fu_429_p1 <= grp_fu_429_p10(16 - 1 downto 0);
    grp_fu_429_p10 <= std_logic_vector(resize(unsigned(p_Val2_2_cast2_fu_260_p1),28));
    grp_fu_429_p2 <= (r_V_2_fu_274_p2 & ap_const_lv12_0);
    grp_fu_438_p0 <= grp_fu_438_p00(19 - 1 downto 0);
    grp_fu_438_p00 <= std_logic_vector(resize(unsigned(p_shl_fu_161_p3),20));
    grp_fu_438_p1 <= grp_fu_438_p10(17 - 1 downto 0);
    grp_fu_438_p10 <= std_logic_vector(resize(unsigned(p_shl5_fu_173_p3),20));
    grp_fu_438_p2 <= grp_fu_438_p20(16 - 1 downto 0);
    grp_fu_438_p20 <= std_logic_vector(resize(unsigned(radius_V_fu_153_p3),36));
        p_Val2_10_cast_fu_301_p1 <= std_logic_vector(resize(signed(p_Val2_7_reg_494),26));

    p_Val2_10_fu_383_p2 <= std_logic_vector(unsigned(grp_fu_360_p2) + unsigned(tmp_6_fu_376_p3));
        p_Val2_2_cast2_fu_260_p1 <= std_logic_vector(resize(signed(p_Val2_s_reg_466),16));

        p_Val2_2_cast_fu_218_p1 <= std_logic_vector(resize(signed(p_Val2_s_fu_208_p4),13));

    p_Val2_6_fu_231_p3 <= (p_Val2_8_reg_472 & ap_const_lv1_0);
    p_Val2_8_fu_222_p2 <= std_logic_vector(signed(ap_const_lv13_1000) - signed(p_Val2_2_cast_fu_218_p1));
    p_Val2_s_fu_208_p4 <= grp_fu_202_p2(48 downto 43);
    p_shl5_fu_173_p3 <= (tmp_fu_149_p1 & ap_const_lv13_0);
    p_shl_fu_161_p3 <= (tmp_fu_149_p1 & ap_const_lv15_0);
    rUserIn_V <= tUserOut_V;

    -- rUserIn_V_ap_vld assign process. --
    rUserIn_V_ap_vld_assign_proc : process(rotateReady_V_read_read_fu_112_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0))) then 
            rUserIn_V_ap_vld <= ap_const_logic_1;
        else 
            rUserIn_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_2_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv16_1000) + unsigned(tmp_cast_fu_270_p1));
    r_V_3_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) + unsigned(p_Val2_6_fu_231_p3));
    r_V_4_fu_304_p2 <= std_logic_vector(unsigned(p_Val2_9_reg_489) - unsigned(p_Val2_10_cast_fu_301_p1));
    radius_V_fu_153_p3 <= (tmp_fu_149_p1 & ap_const_lv12_0);
    rotateCin_V <= std_logic_vector(resize(unsigned(tmp_2_fu_411_p4),32));

    -- rotateCin_V_ap_vld assign process. --
    rotateCin_V_ap_vld_assign_proc : process(rotateReady_V_read_read_fu_112_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0))) then 
            rotateCin_V_ap_vld <= ap_const_logic_1;
        else 
            rotateCin_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rotatePIn_V <= std_logic_vector(resize(unsigned(ret_V_1_reg_446),16));

    -- rotatePIn_V_ap_vld assign process. --
    rotatePIn_V_ap_vld_assign_proc : process(rotateReady_V_read_read_fu_112_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (rotateReady_V_read_read_fu_112_p2 = ap_const_lv1_0))) then 
            rotatePIn_V_ap_vld <= ap_const_logic_1;
        else 
            rotatePIn_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rotateReady_V_read_read_fu_112_p2 <= rotateReady_V;
    tmp_2_fu_411_p4 <= p_Val2_11_reg_579(27 downto 24);
    tmp_6_fu_376_p3 <= (tmp_3_reg_550 & ap_const_lv36_0);
    tmp_7_fu_189_p4 <= r_V_6_reg_456(35 downto 12);
    tmp_9_fu_263_p3 <= (p_Val2_s_reg_466 & ap_const_lv1_0);
        tmp_cast_fu_270_p1 <= std_logic_vector(resize(signed(tmp_9_fu_263_p3),16));

    tmp_fu_149_p1 <= translateOut_V(4 - 1 downto 0);
end behav;
