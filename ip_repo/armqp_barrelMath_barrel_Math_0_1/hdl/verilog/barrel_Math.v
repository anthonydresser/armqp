// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="barrel_Math,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.734007,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=348,HLS_SYN_LUT=263}" *)

module barrel_Math (
        ap_clk,
        ap_rst,
        translateIn_V,
        translateIn_V_ap_vld,
        translateOut_V,
        translateOut_V_ap_vld,
        rotateCin_V,
        rotateCin_V_ap_vld,
        rotatePIn_V,
        rotatePIn_V_ap_vld,
        rotateOut_V,
        rotateOut_V_ap_vld,
        xOut_V,
        xOut_V_ap_vld,
        yOut_V,
        yOut_V_ap_vld,
        currentLine_V,
        currentLine_V_ap_vld,
        dataIn_V,
        dataInValid_V,
        masterReady_V,
        rotateReadyIn_V,
        masterReadyOut_V,
        rUserIn_V,
        rUserOut_V,
        tUserIn_V,
        tUserOut_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv11_436 = 11'b10000110110;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv11_3BE = 11'b1110111110;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
output  [31:0] translateIn_V;
output   translateIn_V_ap_vld;
input  [31:0] translateOut_V;
input   translateOut_V_ap_vld;
output  [31:0] rotateCin_V;
output   rotateCin_V_ap_vld;
output  [15:0] rotatePIn_V;
output   rotatePIn_V_ap_vld;
input  [31:0] rotateOut_V;
input   rotateOut_V_ap_vld;
output  [10:0] xOut_V;
output   xOut_V_ap_vld;
output  [10:0] yOut_V;
output   yOut_V_ap_vld;
output  [15:0] currentLine_V;
output   currentLine_V_ap_vld;
input  [15:0] dataIn_V;
input  [0:0] dataInValid_V;
input  [0:0] masterReady_V;
input  [0:0] rotateReadyIn_V;
output  [0:0] masterReadyOut_V;
output  [21:0] rUserIn_V;
input  [21:0] rUserOut_V;
output  [21:0] tUserIn_V;
input  [21:0] tUserOut_V;

reg translateIn_V_ap_vld;
reg xOut_V_ap_vld;
reg yOut_V_ap_vld;
reg currentLine_V_ap_vld;
reg[0:0] masterReadyOut_V;
reg   [31:0] translateOut_V_in_sig;
reg   [31:0] translateOut_V_preg = 32'b00000000000000000000000000000000;
reg    translateOut_V_ap_vld_in_sig;
reg    translateOut_V_ap_vld_preg = 1'b0;
reg   [31:0] rotateOut_V_in_sig;
reg   [31:0] rotateOut_V_preg = 32'b00000000000000000000000000000000;
reg    rotateOut_V_ap_vld_in_sig;
reg    rotateOut_V_ap_vld_preg = 1'b0;
reg   [10:0] y_V = 11'b00000000000;
reg   [10:0] x_V = 11'b00000000000;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_56;
reg    ap_sig_bdd_61;
wire   [0:0] masterReady_V_read_read_fu_124_p2;
wire    grp_barrel_Math_getNewRadius_fu_186_ap_start;
wire    grp_barrel_Math_getNewRadius_fu_186_ap_done;
wire    grp_barrel_Math_getNewRadius_fu_186_ap_idle;
wire    grp_barrel_Math_getNewRadius_fu_186_ap_ready;
wire   [31:0] grp_barrel_Math_getNewRadius_fu_186_translateOut_V;
wire   [31:0] grp_barrel_Math_getNewRadius_fu_186_rotateCin_V;
wire    grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld;
wire   [15:0] grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V;
wire    grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld;
wire   [0:0] grp_barrel_Math_getNewRadius_fu_186_rotateReady_V;
wire   [21:0] grp_barrel_Math_getNewRadius_fu_186_rUserIn_V;
wire    grp_barrel_Math_getNewRadius_fu_186_rUserIn_V_ap_vld;
wire   [21:0] grp_barrel_Math_getNewRadius_fu_186_tUserOut_V;
reg    grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_96;
wire   [10:0] p_tmp_4_cast_fu_268_p1;
wire   [0:0] tmp_1_fu_220_p2;
wire   [10:0] tmp_3_fu_226_p2;
wire   [9:0] tmp_4_fu_250_p1;
wire   [0:0] tmp_2_fu_244_p2;
wire   [9:0] tmp_4_cast_fu_254_p2;
wire   [9:0] p_tmp_4_fu_260_p3;
wire   [10:0] tmp_6_fu_294_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_64;
reg    ap_sig_bdd_91;


barrel_Math_getNewRadius grp_barrel_Math_getNewRadius_fu_186(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_barrel_Math_getNewRadius_fu_186_ap_start ),
    .ap_done( grp_barrel_Math_getNewRadius_fu_186_ap_done ),
    .ap_idle( grp_barrel_Math_getNewRadius_fu_186_ap_idle ),
    .ap_ready( grp_barrel_Math_getNewRadius_fu_186_ap_ready ),
    .translateOut_V( grp_barrel_Math_getNewRadius_fu_186_translateOut_V ),
    .rotateCin_V( grp_barrel_Math_getNewRadius_fu_186_rotateCin_V ),
    .rotateCin_V_ap_vld( grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld ),
    .rotatePIn_V( grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V ),
    .rotatePIn_V_ap_vld( grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld ),
    .rotateReady_V( grp_barrel_Math_getNewRadius_fu_186_rotateReady_V ),
    .rUserIn_V( grp_barrel_Math_getNewRadius_fu_186_rUserIn_V ),
    .rUserIn_V_ap_vld( grp_barrel_Math_getNewRadius_fu_186_rUserIn_V_ap_vld ),
    .tUserOut_V( grp_barrel_Math_getNewRadius_fu_186_tUserOut_V )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0))) begin
            grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_barrel_Math_getNewRadius_fu_186_ap_ready)) begin
            grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// rotateOut_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_rotateOut_V_ap_vld_preg
    if (ap_rst == 1'b1) begin
        rotateOut_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0) & (ap_const_logic_0 == grp_barrel_Math_getNewRadius_fu_186_ap_done)))) begin
            rotateOut_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == rotateOut_V_ap_vld)) begin
            rotateOut_V_ap_vld_preg <= rotateOut_V_ap_vld;
        end
    end
end

/// rotateOut_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_rotateOut_V_preg
    if (ap_rst == 1'b1) begin
        rotateOut_V_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_const_logic_1 == rotateOut_V_ap_vld)) begin
            rotateOut_V_preg <= rotateOut_V;
        end
    end
end

/// translateOut_V_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_translateOut_V_ap_vld_preg
    if (ap_rst == 1'b1) begin
        translateOut_V_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0) & (ap_const_logic_0 == grp_barrel_Math_getNewRadius_fu_186_ap_done)))) begin
            translateOut_V_ap_vld_preg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == translateOut_V_ap_vld)) begin
            translateOut_V_ap_vld_preg <= translateOut_V_ap_vld;
        end
    end
end

/// translateOut_V_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_translateOut_V_preg
    if (ap_rst == 1'b1) begin
        translateOut_V_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_const_logic_1 == translateOut_V_ap_vld)) begin
            translateOut_V_preg <= translateOut_V;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_91) begin
        if (~(ap_const_lv1_0 == tmp_1_fu_220_p2)) begin
            x_V <= ap_const_lv11_0;
        end else if ((ap_const_lv1_0 == tmp_1_fu_220_p2)) begin
            x_V <= tmp_3_fu_226_p2;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_1_fu_220_p2))) begin
        y_V[9 : 0] <= p_tmp_4_cast_fu_268_p1[9 : 0];
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_56)
begin
    if (ap_sig_bdd_56) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// currentLine_V_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0))) begin
        currentLine_V_ap_vld = ap_const_logic_1;
    end else begin
        currentLine_V_ap_vld = ap_const_logic_0;
    end
end

/// masterReadyOut_V assign process. ///
always @ (masterReady_V_read_read_fu_124_p2 or ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        if (~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0)) begin
            masterReadyOut_V = ap_const_lv1_1;
        end else if ((masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0)) begin
            masterReadyOut_V = ap_const_lv1_0;
        end else begin
            masterReadyOut_V = 'bx;
        end
    end else begin
        masterReadyOut_V = 'bx;
    end
end

/// rotateOut_V_ap_vld_in_sig assign process. ///
always @ (rotateOut_V_ap_vld or rotateOut_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == rotateOut_V_ap_vld)) begin
        rotateOut_V_ap_vld_in_sig = rotateOut_V_ap_vld;
    end else begin
        rotateOut_V_ap_vld_in_sig = rotateOut_V_ap_vld_preg;
    end
end

/// rotateOut_V_in_sig assign process. ///
always @ (rotateOut_V or rotateOut_V_preg or rotateOut_V_ap_vld)
begin
    if ((ap_const_logic_1 == rotateOut_V_ap_vld)) begin
        rotateOut_V_in_sig = rotateOut_V;
    end else begin
        rotateOut_V_in_sig = rotateOut_V_preg;
    end
end

/// translateIn_V_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0))) begin
        translateIn_V_ap_vld = ap_const_logic_1;
    end else begin
        translateIn_V_ap_vld = ap_const_logic_0;
    end
end

/// translateOut_V_ap_vld_in_sig assign process. ///
always @ (translateOut_V_ap_vld or translateOut_V_ap_vld_preg)
begin
    if ((ap_const_logic_1 == translateOut_V_ap_vld)) begin
        translateOut_V_ap_vld_in_sig = translateOut_V_ap_vld;
    end else begin
        translateOut_V_ap_vld_in_sig = translateOut_V_ap_vld_preg;
    end
end

/// translateOut_V_in_sig assign process. ///
always @ (translateOut_V or translateOut_V_preg or translateOut_V_ap_vld)
begin
    if ((ap_const_logic_1 == translateOut_V_ap_vld)) begin
        translateOut_V_in_sig = translateOut_V;
    end else begin
        translateOut_V_in_sig = translateOut_V_preg;
    end
end

/// xOut_V_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0))) begin
        xOut_V_ap_vld = ap_const_logic_1;
    end else begin
        xOut_V_ap_vld = ap_const_logic_0;
    end
end

/// yOut_V_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0))) begin
        yOut_V_ap_vld = ap_const_logic_1;
    end else begin
        yOut_V_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2 or grp_barrel_Math_getNewRadius_fu_186_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_61) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0) & (ap_const_logic_0 == grp_barrel_Math_getNewRadius_fu_186_ap_done))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_56 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_56 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_61 assign process. ///
always @ (translateOut_V_ap_vld_in_sig or rotateOut_V_ap_vld_in_sig)
begin
    ap_sig_bdd_61 = ((rotateOut_V_ap_vld_in_sig == ap_const_logic_0) | (translateOut_V_ap_vld_in_sig == ap_const_logic_0));
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61)
begin
    ap_sig_bdd_64 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61);
end

/// ap_sig_bdd_91 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61 or masterReady_V_read_read_fu_124_p2)
begin
    ap_sig_bdd_91 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61 & ~(masterReady_V_read_read_fu_124_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign currentLine_V = tmp_6_fu_294_p4;
assign grp_barrel_Math_getNewRadius_fu_186_ap_start = grp_barrel_Math_getNewRadius_fu_186_ap_start_ap_start_reg;
assign grp_barrel_Math_getNewRadius_fu_186_rotateReady_V = rotateReadyIn_V;
assign grp_barrel_Math_getNewRadius_fu_186_tUserOut_V = tUserOut_V;
assign grp_barrel_Math_getNewRadius_fu_186_translateOut_V = translateOut_V_in_sig;
assign masterReady_V_read_read_fu_124_p2 = masterReady_V;
assign p_tmp_4_cast_fu_268_p1 = p_tmp_4_fu_260_p3;
assign p_tmp_4_fu_260_p3 = ((tmp_2_fu_244_p2[0:0]===1'b1)? ap_const_lv10_0: tmp_4_cast_fu_254_p2);
assign rUserIn_V = grp_barrel_Math_getNewRadius_fu_186_rUserIn_V;
assign rotateCin_V = grp_barrel_Math_getNewRadius_fu_186_rotateCin_V;
assign rotateCin_V_ap_vld = grp_barrel_Math_getNewRadius_fu_186_rotateCin_V_ap_vld;
assign rotatePIn_V = grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V;
assign rotatePIn_V_ap_vld = grp_barrel_Math_getNewRadius_fu_186_rotatePIn_V_ap_vld;
assign tUserIn_V = x_V;
assign tmp_1_fu_220_p2 = (x_V > ap_const_lv11_436? 1'b1: 1'b0);
assign tmp_2_fu_244_p2 = (y_V > ap_const_lv11_3BE? 1'b1: 1'b0);
assign tmp_3_fu_226_p2 = (x_V + ap_const_lv11_1);
assign tmp_4_cast_fu_254_p2 = (ap_const_lv10_1 + tmp_4_fu_250_p1);
assign tmp_4_fu_250_p1 = y_V[9:0];
assign tmp_6_fu_294_p4 = {{rUserOut_V[ap_const_lv32_15 : ap_const_lv32_B]}};
assign translateIn_V = x_V;
assign xOut_V = rotateOut_V_in_sig[10:0];
assign yOut_V = {{rotateOut_V_in_sig[ap_const_lv32_1A : ap_const_lv32_10]}};
always @ (posedge ap_clk)
begin
    y_V[10] <= 1'b0;
end



endmodule //barrel_Math

