// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module barrel_Math_getNewRadius (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        translateOut_V,
        rotateCin_V,
        rotateCin_V_ap_vld,
        rotatePIn_V,
        rotatePIn_V_ap_vld,
        rotateReady_V,
        rUserIn_V,
        rUserIn_V_ap_vld,
        tUserOut_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 22'b1;
parameter    ap_ST_st2_fsm_1 = 22'b10;
parameter    ap_ST_st3_fsm_2 = 22'b100;
parameter    ap_ST_st4_fsm_3 = 22'b1000;
parameter    ap_ST_st5_fsm_4 = 22'b10000;
parameter    ap_ST_st6_fsm_5 = 22'b100000;
parameter    ap_ST_st7_fsm_6 = 22'b1000000;
parameter    ap_ST_st8_fsm_7 = 22'b10000000;
parameter    ap_ST_st9_fsm_8 = 22'b100000000;
parameter    ap_ST_st10_fsm_9 = 22'b1000000000;
parameter    ap_ST_st11_fsm_10 = 22'b10000000000;
parameter    ap_ST_st12_fsm_11 = 22'b100000000000;
parameter    ap_ST_st13_fsm_12 = 22'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 22'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 22'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 22'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 22'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 22'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 22'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 22'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 22'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 22'b1000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv49_1011F41 = 49'b1000000010001111101000001;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv13_1000 = 13'b1000000000000;
parameter    ap_const_lv14_1000 = 14'b1000000000000;
parameter    ap_const_lv26_EE6 = 26'b111011100110;
parameter    ap_const_lv22_3FFF72 = 22'b1111111111111101110010;
parameter    ap_const_lv16_1000 = 16'b1000000000000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv36_0 = 36'b000000000000000000000000000000000000;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv28_FFFF4FB = 28'b1111111111111111010011111011;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] translateOut_V;
output  [31:0] rotateCin_V;
output   rotateCin_V_ap_vld;
output  [15:0] rotatePIn_V;
output   rotatePIn_V_ap_vld;
input  [0:0] rotateReady_V;
output  [21:0] rUserIn_V;
output   rUserIn_V_ap_vld;
input  [21:0] tUserOut_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rotateCin_V_ap_vld;
reg rotatePIn_V_ap_vld;
reg rUserIn_V_ap_vld;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm = 22'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_40;
reg   [3:0] ret_V_1_reg_446;
wire   [15:0] radius_V_fu_153_p3;
reg   [15:0] radius_V_reg_451;
wire   [35:0] grp_fu_438_p3;
reg   [35:0] r_V_6_reg_456;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_70;
wire   [5:0] p_Val2_s_fu_208_p4;
reg   [5:0] p_Val2_s_reg_466;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_79;
wire  signed [12:0] p_Val2_8_fu_222_p2;
reg  signed [12:0] p_Val2_8_reg_472;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_90;
wire   [25:0] grp_fu_248_p2;
reg   [25:0] p_Val2_9_reg_489;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_101;
wire  signed [21:0] grp_fu_254_p2;
reg  signed [21:0] p_Val2_7_reg_494;
wire  signed [15:0] p_Val2_2_cast2_fu_260_p1;
reg  signed [15:0] p_Val2_2_cast2_reg_499;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_112;
reg   [15:0] tmp_8_reg_504;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_127;
wire   [27:0] OP2_V_5_cast_fu_326_p1;
reg   [27:0] OP2_V_5_cast_reg_524;
reg   [15:0] tmp_s_reg_530;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_138;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_147;
reg   [15:0] tmp_3_reg_550;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_160;
reg   [15:0] tmp_1_reg_555;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_169;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_178;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_189;
wire   [0:0] rotateReady_V_read_read_fu_112_p2;
wire   [31:0] grp_fu_405_p2;
reg   [31:0] p_Val2_11_reg_579;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_202;
wire   [3:0] tmp_fu_149_p1;
wire   [18:0] p_shl_fu_161_p3;
wire   [16:0] p_shl5_fu_173_p3;
wire   [23:0] tmp_7_fu_189_p4;
wire   [25:0] grp_fu_202_p0;
wire   [23:0] grp_fu_202_p1;
wire   [48:0] grp_fu_202_p2;
wire  signed [12:0] p_Val2_2_cast_fu_218_p1;
wire   [13:0] p_Val2_6_fu_231_p3;
wire   [13:0] r_V_3_fu_238_p2;
wire   [12:0] grp_fu_248_p0;
wire   [13:0] grp_fu_248_p1;
wire  signed [8:0] grp_fu_254_p0;
wire   [12:0] grp_fu_254_p1;
wire   [6:0] tmp_9_fu_263_p3;
wire  signed [15:0] tmp_cast_fu_270_p1;
wire  signed [15:0] r_V_2_fu_274_p2;
wire  signed [27:0] grp_fu_429_p3;
wire  signed [25:0] p_Val2_10_cast_fu_301_p1;
wire  signed [25:0] r_V_4_fu_304_p2;
wire   [15:0] grp_fu_317_p0;
wire   [25:0] grp_fu_317_p1;
wire   [12:0] grp_fu_329_p0;
wire   [15:0] grp_fu_329_p1;
wire   [27:0] grp_fu_329_p2;
wire   [12:0] grp_fu_348_p0;
wire   [15:0] grp_fu_348_p1;
wire   [41:0] grp_fu_317_p2;
wire   [15:0] grp_fu_360_p0;
wire   [41:0] grp_fu_360_p1;
wire   [27:0] grp_fu_348_p2;
wire   [51:0] grp_fu_360_p2;
wire   [51:0] tmp_6_fu_376_p3;
wire   [51:0] p_Val2_10_fu_383_p2;
wire   [15:0] grp_fu_405_p0;
wire   [15:0] grp_fu_405_p1;
wire   [3:0] tmp_2_fu_411_p4;
wire  signed [12:0] grp_fu_429_p0;
wire   [15:0] grp_fu_429_p1;
wire   [27:0] grp_fu_429_p2;
wire   [18:0] grp_fu_438_p0;
wire   [16:0] grp_fu_438_p1;
wire   [15:0] grp_fu_438_p2;
wire    grp_fu_202_ce;
wire    grp_fu_248_ce;
wire    grp_fu_254_ce;
wire    grp_fu_317_ce;
wire    grp_fu_329_ce;
wire    grp_fu_348_ce;
wire    grp_fu_360_ce;
wire    grp_fu_405_ce;
reg   [21:0] ap_NS_fsm;
wire   [48:0] grp_fu_202_p10;
wire   [25:0] grp_fu_248_p10;
wire   [21:0] grp_fu_254_p10;
wire   [41:0] grp_fu_317_p00;
wire   [41:0] grp_fu_317_p10;
wire   [27:0] grp_fu_329_p00;
wire   [27:0] grp_fu_329_p10;
wire   [27:0] grp_fu_348_p10;
wire   [51:0] grp_fu_360_p00;
wire   [51:0] grp_fu_360_p10;
wire   [31:0] grp_fu_405_p00;
wire   [31:0] grp_fu_405_p10;
wire   [27:0] grp_fu_429_p10;
wire   [19:0] grp_fu_438_p00;
wire   [19:0] grp_fu_438_p10;
wire   [35:0] grp_fu_438_p20;


barrel_Math_mul_26ns_24ns_49_5 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 49 ))
barrel_Math_mul_26ns_24ns_49_5_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_202_p0 ),
    .din1( grp_fu_202_p1 ),
    .ce( grp_fu_202_ce ),
    .dout( grp_fu_202_p2 )
);

barrel_Math_mul_13ns_14ns_26_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
barrel_Math_mul_13ns_14ns_26_3_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_248_p0 ),
    .din1( grp_fu_248_p1 ),
    .ce( grp_fu_248_ce ),
    .dout( grp_fu_248_p2 )
);

barrel_Math_mul_9s_13ns_22_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 22 ))
barrel_Math_mul_9s_13ns_22_3_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_254_p0 ),
    .din1( grp_fu_254_p1 ),
    .ce( grp_fu_254_ce ),
    .dout( grp_fu_254_p2 )
);

barrel_Math_mul_16ns_26ns_42_5 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 42 ))
barrel_Math_mul_16ns_26ns_42_5_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_317_p0 ),
    .din1( grp_fu_317_p1 ),
    .ce( grp_fu_317_ce ),
    .dout( grp_fu_317_p2 )
);

barrel_Math_mul_13ns_16ns_28_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
barrel_Math_mul_13ns_16ns_28_3_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_329_p0 ),
    .din1( grp_fu_329_p1 ),
    .ce( grp_fu_329_ce ),
    .dout( grp_fu_329_p2 )
);

barrel_Math_mul_13ns_16ns_28_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
barrel_Math_mul_13ns_16ns_28_3_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_348_p0 ),
    .din1( grp_fu_348_p1 ),
    .ce( grp_fu_348_ce ),
    .dout( grp_fu_348_p2 )
);

barrel_Math_mul_16ns_42ns_52_5 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 52 ))
barrel_Math_mul_16ns_42ns_52_5_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_360_p0 ),
    .din1( grp_fu_360_p1 ),
    .ce( grp_fu_360_ce ),
    .dout( grp_fu_360_p2 )
);

barrel_Math_mul_16ns_16ns_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
barrel_Math_mul_16ns_16ns_32_3_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_405_p0 ),
    .din1( grp_fu_405_p1 ),
    .ce( grp_fu_405_ce ),
    .dout( grp_fu_405_p2 )
);

barrel_Math_mac_muladd_13s_16ns_28ns_28_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
barrel_Math_mac_muladd_13s_16ns_28ns_28_1_U8(
    .din0( grp_fu_429_p0 ),
    .din1( grp_fu_429_p1 ),
    .din2( grp_fu_429_p2 ),
    .dout( grp_fu_429_p3 )
);

barrel_Math_am_addmul_19ns_17ns_16ns_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 36 ))
barrel_Math_am_addmul_19ns_17ns_16ns_36_1_U9(
    .din0( grp_fu_438_p0 ),
    .din1( grp_fu_438_p1 ),
    .din2( grp_fu_438_p2 ),
    .dout( grp_fu_438_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        OP2_V_5_cast_reg_524[12 : 0] <= OP2_V_5_cast_fu_326_p1[12 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        p_Val2_11_reg_579 <= grp_fu_405_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        p_Val2_2_cast2_reg_499 <= p_Val2_2_cast2_fu_260_p1;
        tmp_8_reg_504 <= {{grp_fu_429_p3[ap_const_lv32_1B : ap_const_lv32_C]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        p_Val2_7_reg_494 <= grp_fu_254_p2;
        p_Val2_9_reg_489 <= grp_fu_248_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        p_Val2_8_reg_472 <= p_Val2_8_fu_222_p2;
        p_Val2_s_reg_466 <= {{grp_fu_202_p2[ap_const_lv32_30 : ap_const_lv32_2B]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        r_V_6_reg_456 <= grp_fu_438_p3;
        radius_V_reg_451[15 : 12] <= radius_V_fu_153_p3[15 : 12];
        ret_V_1_reg_446 <= {{translateOut_V[ap_const_lv32_13 : ap_const_lv32_10]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        tmp_1_reg_555 <= {{p_Val2_10_fu_383_p2[ap_const_lv32_33 : ap_const_lv32_24]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        tmp_3_reg_550 <= {{grp_fu_348_p2[ap_const_lv32_1B : ap_const_lv32_C]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        tmp_s_reg_530 <= {{grp_fu_329_p2[ap_const_lv32_1B : ap_const_lv32_C]}};
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or rotateReady_V_read_read_fu_112_p2 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & ~(rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (rotateReady_V_read_read_fu_112_p2 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & ~(rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_112)
begin
    if (ap_sig_bdd_112) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_127)
begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_138)
begin
    if (ap_sig_bdd_138) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_147)
begin
    if (ap_sig_bdd_147) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_160)
begin
    if (ap_sig_bdd_160) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_169)
begin
    if (ap_sig_bdd_169) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_178)
begin
    if (ap_sig_bdd_178) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_40)
begin
    if (ap_sig_bdd_40) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_189)
begin
    if (ap_sig_bdd_189) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_202)
begin
    if (ap_sig_bdd_202) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_70)
begin
    if (ap_sig_bdd_70) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_90)
begin
    if (ap_sig_bdd_90) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_101)
begin
    if (ap_sig_bdd_101) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// rUserIn_V_ap_vld assign process. ///
always @ (rotateReady_V_read_read_fu_112_p2 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & (rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0))) begin
        rUserIn_V_ap_vld = ap_const_logic_1;
    end else begin
        rUserIn_V_ap_vld = ap_const_logic_0;
    end
end

/// rotateCin_V_ap_vld assign process. ///
always @ (rotateReady_V_read_read_fu_112_p2 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & (rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0))) begin
        rotateCin_V_ap_vld = ap_const_logic_1;
    end else begin
        rotateCin_V_ap_vld = ap_const_logic_0;
    end
end

/// rotatePIn_V_ap_vld assign process. ///
always @ (rotateReady_V_read_read_fu_112_p2 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & (rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0))) begin
        rotatePIn_V_ap_vld = ap_const_logic_1;
    end else begin
        rotatePIn_V_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or rotateReady_V_read_read_fu_112_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            if (~(rotateReady_V_read_read_fu_112_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_5_cast_fu_326_p1 = $unsigned(p_Val2_8_reg_472);

/// ap_sig_bdd_101 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_101 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_112 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_112 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_127 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_138 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_138 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_147 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_147 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_160 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_160 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_169 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_169 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_178 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_178 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_189 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_189 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_202 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_202 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_40 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_40 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_70 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_70 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_90 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_90 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end
assign grp_fu_202_ce = ap_const_logic_1;
assign grp_fu_202_p0 = ap_const_lv49_1011F41;
assign grp_fu_202_p1 = grp_fu_202_p10;
assign grp_fu_202_p10 = tmp_7_fu_189_p4;
assign grp_fu_248_ce = ap_const_logic_1;
assign grp_fu_248_p0 = ap_const_lv26_EE6;
assign grp_fu_248_p1 = grp_fu_248_p10;
assign grp_fu_248_p10 = r_V_3_fu_238_p2;
assign grp_fu_254_ce = ap_const_logic_1;
assign grp_fu_254_p0 = ap_const_lv22_3FFF72;
assign grp_fu_254_p1 = grp_fu_254_p10;
assign grp_fu_254_p10 = $unsigned(p_Val2_8_reg_472);
assign grp_fu_317_ce = ap_const_logic_1;
assign grp_fu_317_p0 = grp_fu_317_p00;
assign grp_fu_317_p00 = $unsigned(p_Val2_2_cast2_fu_260_p1);
assign grp_fu_317_p1 = grp_fu_317_p10;
assign grp_fu_317_p10 = $unsigned(r_V_4_fu_304_p2);
assign grp_fu_329_ce = ap_const_logic_1;
assign grp_fu_329_p0 = grp_fu_329_p00;
assign grp_fu_329_p00 = $unsigned(p_Val2_8_reg_472);
assign grp_fu_329_p1 = grp_fu_329_p10;
assign grp_fu_329_p10 = tmp_8_reg_504;
assign grp_fu_348_ce = ap_const_logic_1;
assign grp_fu_348_p0 = OP2_V_5_cast_reg_524;
assign grp_fu_348_p1 = grp_fu_348_p10;
assign grp_fu_348_p10 = tmp_s_reg_530;
assign grp_fu_360_ce = ap_const_logic_1;
assign grp_fu_360_p0 = grp_fu_360_p00;
assign grp_fu_360_p00 = $unsigned(p_Val2_2_cast2_reg_499);
assign grp_fu_360_p1 = grp_fu_360_p10;
assign grp_fu_360_p10 = grp_fu_317_p2;
assign grp_fu_405_ce = ap_const_logic_1;
assign grp_fu_405_p0 = grp_fu_405_p00;
assign grp_fu_405_p00 = radius_V_reg_451;
assign grp_fu_405_p1 = grp_fu_405_p10;
assign grp_fu_405_p10 = tmp_1_reg_555;
assign grp_fu_429_p0 = ap_const_lv28_FFFF4FB;
assign grp_fu_429_p1 = grp_fu_429_p10;
assign grp_fu_429_p10 = $unsigned(p_Val2_2_cast2_fu_260_p1);
assign grp_fu_429_p2 = {{r_V_2_fu_274_p2}, {ap_const_lv12_0}};
assign grp_fu_438_p0 = grp_fu_438_p00;
assign grp_fu_438_p00 = p_shl_fu_161_p3;
assign grp_fu_438_p1 = grp_fu_438_p10;
assign grp_fu_438_p10 = p_shl5_fu_173_p3;
assign grp_fu_438_p2 = grp_fu_438_p20;
assign grp_fu_438_p20 = radius_V_fu_153_p3;
assign p_Val2_10_cast_fu_301_p1 = p_Val2_7_reg_494;
assign p_Val2_10_fu_383_p2 = (grp_fu_360_p2 + tmp_6_fu_376_p3);
assign p_Val2_2_cast2_fu_260_p1 = $signed(p_Val2_s_reg_466);
assign p_Val2_2_cast_fu_218_p1 = $signed(p_Val2_s_fu_208_p4);
assign p_Val2_6_fu_231_p3 = {{p_Val2_8_reg_472}, {ap_const_lv1_0}};
assign p_Val2_8_fu_222_p2 = ($signed(ap_const_lv13_1000) - $signed(p_Val2_2_cast_fu_218_p1));
assign p_Val2_s_fu_208_p4 = {{grp_fu_202_p2[ap_const_lv32_30 : ap_const_lv32_2B]}};
assign p_shl5_fu_173_p3 = {{tmp_fu_149_p1}, {ap_const_lv13_0}};
assign p_shl_fu_161_p3 = {{tmp_fu_149_p1}, {ap_const_lv15_0}};
assign rUserIn_V = tUserOut_V;
assign r_V_2_fu_274_p2 = ($signed(ap_const_lv16_1000) + $signed(tmp_cast_fu_270_p1));
assign r_V_3_fu_238_p2 = (ap_const_lv14_1000 + p_Val2_6_fu_231_p3);
assign r_V_4_fu_304_p2 = ($signed(p_Val2_9_reg_489) - $signed(p_Val2_10_cast_fu_301_p1));
assign radius_V_fu_153_p3 = {{tmp_fu_149_p1}, {ap_const_lv12_0}};
assign rotateCin_V = tmp_2_fu_411_p4;
assign rotatePIn_V = ret_V_1_reg_446;
assign rotateReady_V_read_read_fu_112_p2 = rotateReady_V;
assign tmp_2_fu_411_p4 = {{p_Val2_11_reg_579[ap_const_lv32_1B : ap_const_lv32_18]}};
assign tmp_6_fu_376_p3 = {{tmp_3_reg_550}, {ap_const_lv36_0}};
assign tmp_7_fu_189_p4 = {{r_V_6_reg_456[ap_const_lv32_23 : ap_const_lv32_C]}};
assign tmp_9_fu_263_p3 = {{p_Val2_s_reg_466}, {ap_const_lv1_0}};
assign tmp_cast_fu_270_p1 = $signed(tmp_9_fu_263_p3);
assign tmp_fu_149_p1 = translateOut_V[3:0];
always @ (posedge ap_clk)
begin
    radius_V_reg_451[11:0] <= 12'b000000000000;
    OP2_V_5_cast_reg_524[27:13] <= 15'b000000000000000;
end



endmodule //barrel_Math_getNewRadius

