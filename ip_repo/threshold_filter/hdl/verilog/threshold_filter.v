// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="threshold_filter,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.368000,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=46}" *)

module threshold_filter (
        ap_clk,
        ap_rst_n,
        videoIn_TDATA,
        videoIn_TVALID,
        videoIn_TREADY,
        videoIn_TKEEP,
        videoIn_TSTRB,
        videoIn_TUSER,
        videoIn_TLAST,
        videoIn_TID,
        videoIn_TDEST,
        videoOut_TDATA,
        videoOut_TVALID,
        videoOut_TREADY,
        videoOut_TKEEP,
        videoOut_TSTRB,
        videoOut_TUSER,
        videoOut_TLAST,
        videoOut_TID,
        videoOut_TDEST
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv10_280 = 10'b1010000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv8_77 = 8'b1110111;
parameter    ap_const_lv16_8010 = 16'b1000000000010000;
parameter    ap_const_lv16_80EB = 16'b1000000011101011;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [15:0] videoIn_TDATA;
input   videoIn_TVALID;
output   videoIn_TREADY;
input  [1:0] videoIn_TKEEP;
input  [1:0] videoIn_TSTRB;
input  [1:0] videoIn_TUSER;
input  [0:0] videoIn_TLAST;
input  [4:0] videoIn_TID;
input  [5:0] videoIn_TDEST;
output  [15:0] videoOut_TDATA;
output   videoOut_TVALID;
input   videoOut_TREADY;
output  [1:0] videoOut_TKEEP;
output  [1:0] videoOut_TSTRB;
output  [1:0] videoOut_TUSER;
output  [0:0] videoOut_TLAST;
output  [4:0] videoOut_TID;
output  [5:0] videoOut_TDEST;

reg videoIn_TREADY;
reg videoOut_TVALID;
reg    ap_rst_n_inv;
wire   [9:0] i_1_fu_135_p2;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_37;
wire   [0:0] exitcond_fu_129_p2;
reg    ap_sig_bdd_45;
reg    ap_sig_ioackin_videoOut_TREADY;
reg   [9:0] i_reg_118;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_60;
reg    ap_reg_ioackin_videoOut_TREADY = 1'b0;
wire   [7:0] r_V_fu_150_p1;
wire   [0:0] tmp_1_fu_154_p2;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_videoOut_TREADY assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_videoOut_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_129_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_129_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
            ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_129_p2 == ap_const_lv1_0) & ~ap_sig_bdd_45 & (ap_const_logic_1 == videoOut_TREADY))) begin
            ap_reg_ioackin_videoOut_TREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_129_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_129_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
        i_reg_118 <= i_1_fu_135_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_reg_118 <= ap_const_lv10_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_60) begin
    if (ap_sig_bdd_60) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_37) begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_videoOut_TREADY assign process. ///
always @ (videoOut_TREADY or ap_reg_ioackin_videoOut_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_videoOut_TREADY)) begin
        ap_sig_ioackin_videoOut_TREADY = videoOut_TREADY;
    end else begin
        ap_sig_ioackin_videoOut_TREADY = ap_const_logic_1;
    end
end

/// videoIn_TREADY assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_129_p2 or ap_sig_bdd_45 or ap_sig_ioackin_videoOut_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_129_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_129_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
        videoIn_TREADY = ap_const_logic_1;
    end else begin
        videoIn_TREADY = ap_const_logic_0;
    end
end

/// videoOut_TVALID assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_129_p2 or ap_sig_bdd_45 or ap_reg_ioackin_videoOut_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_129_p2 == ap_const_lv1_0) & ~ap_sig_bdd_45 & (ap_const_logic_0 == ap_reg_ioackin_videoOut_TREADY))) begin
        videoOut_TVALID = ap_const_logic_1;
    end else begin
        videoOut_TVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_129_p2 or ap_sig_bdd_45 or ap_sig_ioackin_videoOut_TREADY) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(ap_sig_bdd_45 | ((exitcond_fu_129_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))) & ~(exitcond_fu_129_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_129_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_129_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_videoOut_TREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_1] == ap_const_lv1_1);
end

/// ap_sig_bdd_45 assign process. ///
always @ (videoIn_TVALID or exitcond_fu_129_p2) begin
    ap_sig_bdd_45 = ((videoIn_TVALID == ap_const_logic_0) & (exitcond_fu_129_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_60 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_60 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_0]);
end
assign exitcond_fu_129_p2 = (i_reg_118 == ap_const_lv10_280? 1'b1: 1'b0);
assign i_1_fu_135_p2 = (i_reg_118 + ap_const_lv10_1);
assign r_V_fu_150_p1 = videoIn_TDATA[7:0];
assign tmp_1_fu_154_p2 = (r_V_fu_150_p1 < ap_const_lv8_77? 1'b1: 1'b0);
assign videoOut_TDATA = ((tmp_1_fu_154_p2[0:0] === 1'b1) ? ap_const_lv16_8010 : ap_const_lv16_80EB);
assign videoOut_TDEST = ap_const_lv6_1;
assign videoOut_TID = ap_const_lv5_0;
assign videoOut_TKEEP = ap_const_lv2_1;
assign videoOut_TLAST = videoIn_TLAST;
assign videoOut_TSTRB = ap_const_lv2_1;
assign videoOut_TUSER = ap_const_lv2_1;


endmodule //threshold_filter

