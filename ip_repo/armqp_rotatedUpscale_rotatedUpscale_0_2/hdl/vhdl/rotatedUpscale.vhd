-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rotatedUpscale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    vidInput_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    vidInput_TVALID : IN STD_LOGIC;
    vidInput_TREADY : OUT STD_LOGIC;
    vidInput_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    vidInput_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    vidInput_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    vidInput_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    vidInput_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    vidInput_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    vidOutput_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    vidOutput_TVALID : OUT STD_LOGIC;
    vidOutput_TREADY : IN STD_LOGIC;
    vidOutput_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    vidOutput_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    vidOutput_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    vidOutput_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    vidOutput_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    vidOutput_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of rotatedUpscale is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rotatedUpscale,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.734010,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562000,HLS_SYN_LAT=2186,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=11,HLS_SYN_FF=1425,HLS_SYN_LUT=2289}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp1_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st29_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_438 : STD_LOGIC_VECTOR (11 downto 0) := "010000111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_3FD2F684BDA12F68 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010010111101101000010010111101101000010010111101101000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv11_437 : STD_LOGIC_VECTOR (10 downto 0) := "10000110111";
    constant ap_const_lv12_870 : STD_LOGIC_VECTOR (11 downto 0) := "100001110000";
    constant ap_const_lv11_3C8 : STD_LOGIC_VECTOR (10 downto 0) := "01111001000";
    constant ap_const_lv12_86F : STD_LOGIC_VECTOR (11 downto 0) := "100001101111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal line_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_reg_235 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal tmp_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal exitcond1_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_vidOutput_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppstg_j_reg_235_pp0_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it5 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it6 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it7 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it8 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it9 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it10 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it11 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it12 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it13 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it14 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it15 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it16 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it17 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it18 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it19 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it21 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_j_reg_235_pp0_it22 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_reg_247 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_622_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_304_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_reg_626 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_631_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_p_Result_s_reg_650_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_340_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_655 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_354_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_372_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_665 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_4_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal tmp_10_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_560_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal data_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_V_ce1 : STD_LOGIC;
    signal data_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_phi_fu_239_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_342 : BOOLEAN;
    signal tmp_6_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prevIndex_1_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal prevIndex_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal prevVal1_V_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal prevVal2_V_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_516_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_566_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ioackin_vidOutput_TREADY : STD_LOGIC := '0';
    signal grp_fu_258_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_330_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast2_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_11_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_1_fu_380_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_assign_1_cast_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_cast_fu_398_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_387_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_1_i_i_fu_394_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_2_i_i_fu_402_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_25_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_fu_408_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_19_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_426_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_539_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_543_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_258_ce : STD_LOGIC;
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component rotatedUpscale_dmul_64ns_64ns_64_9_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rotatedUpscale_sitodp_32ns_64_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rotatedUpscale_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    data_V_U : component rotatedUpscale_data_V
    generic map (
        DataWidth => 16,
        AddressRange => 1080,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        address1 => data_V_address1,
        ce1 => data_V_ce1,
        q1 => data_V_q1);

    rotatedUpscale_dmul_64ns_64ns_64_9_max_dsp_U0 : component rotatedUpscale_dmul_64ns_64ns_64_9_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_258_p0,
        din1 => grp_fu_258_p1,
        ce => grp_fu_258_ce,
        dout => grp_fu_258_p2);

    rotatedUpscale_sitodp_32ns_64_8_U1 : component rotatedUpscale_sitodp_32ns_64_8
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_263_p0,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_vidOutput_TREADY assign process. --
    ap_reg_ioackin_vidOutput_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_vidOutput_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ioackin_vidOutput_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21))) and (ap_const_logic_1 = vidOutput_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = vidOutput_TREADY)))) then 
                    ap_reg_ioackin_vidOutput_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = exitcond1_fu_298_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                    ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_533_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond_fu_533_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_533_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- j1_reg_247 assign process. --
    j1_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2)))) then 
                j1_reg_247 <= ap_const_lv12_438;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond_fu_533_p2))) then 
                j1_reg_247 <= j_1_fu_560_p2;
            end if; 
        end if;
    end process;

    -- j_reg_235 assign process. --
    j_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                j_reg_235 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = exitcond1_reg_622))) then 
                j_reg_235 <= j_2_reg_626;
            end if; 
        end if;
    end process;

    -- line_r assign process. --
    line_r_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_3) and not((ap_const_lv1_0 = tmp_6_fu_583_p2)))) then 
                line_r <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                line_r <= tmp_11_fu_571_p2;
            elsif (((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then 
                line_r <= tmp_18_fu_521_p2;
            end if; 
        end if;
    end process;

    -- prevIndex_fu_136 assign process. --
    prevIndex_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it20) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it19)) and (ap_const_lv1_0 = tmp_5_fu_466_p2))) then 
                prevIndex_fu_136 <= prevIndex_1_fu_132;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                prevIndex_fu_136 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    -- prevVal1_V_fu_140 assign process. --
    prevVal1_V_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_4_reg_682) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then 
                prevVal1_V_fu_140 <= vidInput_TDATA;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                prevVal1_V_fu_140 <= ap_const_lv16_FFFF;
            end if; 
        end if;
    end process;

    -- prevVal2_V_fu_144 assign process. --
    prevVal2_V_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_5_reg_686) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then 
                prevVal2_V_fu_144 <= vidInput_TDATA;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                prevVal2_V_fu_144 <= ap_const_lv16_FFFF;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then
                ap_reg_ppstg_exitcond1_reg_622_pp0_it1 <= exitcond1_reg_622;
                ap_reg_ppstg_j_reg_235_pp0_it1 <= j_reg_235;
                ap_reg_ppstg_tmp_reg_631_pp0_it1 <= tmp_reg_631;
                exitcond1_reg_622 <= exitcond1_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) then
                ap_reg_ppstg_exitcond1_reg_622_pp0_it10 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it9;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it11 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it10;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it12 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it11;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it13 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it12;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it14 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it13;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it15 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it14;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it16 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it15;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it17 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it16;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it18 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it17;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it19 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it18;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it1;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it20 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it19;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it21 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it20;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it22 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it21;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it23 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it22;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it2;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it3;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it4;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it5;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it7 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it6;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it8 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it7;
                ap_reg_ppstg_exitcond1_reg_622_pp0_it9 <= ap_reg_ppstg_exitcond1_reg_622_pp0_it8;
                ap_reg_ppstg_j_reg_235_pp0_it10 <= ap_reg_ppstg_j_reg_235_pp0_it9;
                ap_reg_ppstg_j_reg_235_pp0_it11 <= ap_reg_ppstg_j_reg_235_pp0_it10;
                ap_reg_ppstg_j_reg_235_pp0_it12 <= ap_reg_ppstg_j_reg_235_pp0_it11;
                ap_reg_ppstg_j_reg_235_pp0_it13 <= ap_reg_ppstg_j_reg_235_pp0_it12;
                ap_reg_ppstg_j_reg_235_pp0_it14 <= ap_reg_ppstg_j_reg_235_pp0_it13;
                ap_reg_ppstg_j_reg_235_pp0_it15 <= ap_reg_ppstg_j_reg_235_pp0_it14;
                ap_reg_ppstg_j_reg_235_pp0_it16 <= ap_reg_ppstg_j_reg_235_pp0_it15;
                ap_reg_ppstg_j_reg_235_pp0_it17 <= ap_reg_ppstg_j_reg_235_pp0_it16;
                ap_reg_ppstg_j_reg_235_pp0_it18 <= ap_reg_ppstg_j_reg_235_pp0_it17;
                ap_reg_ppstg_j_reg_235_pp0_it19 <= ap_reg_ppstg_j_reg_235_pp0_it18;
                ap_reg_ppstg_j_reg_235_pp0_it2 <= ap_reg_ppstg_j_reg_235_pp0_it1;
                ap_reg_ppstg_j_reg_235_pp0_it20 <= ap_reg_ppstg_j_reg_235_pp0_it19;
                ap_reg_ppstg_j_reg_235_pp0_it21 <= ap_reg_ppstg_j_reg_235_pp0_it20;
                ap_reg_ppstg_j_reg_235_pp0_it22 <= ap_reg_ppstg_j_reg_235_pp0_it21;
                ap_reg_ppstg_j_reg_235_pp0_it3 <= ap_reg_ppstg_j_reg_235_pp0_it2;
                ap_reg_ppstg_j_reg_235_pp0_it4 <= ap_reg_ppstg_j_reg_235_pp0_it3;
                ap_reg_ppstg_j_reg_235_pp0_it5 <= ap_reg_ppstg_j_reg_235_pp0_it4;
                ap_reg_ppstg_j_reg_235_pp0_it6 <= ap_reg_ppstg_j_reg_235_pp0_it5;
                ap_reg_ppstg_j_reg_235_pp0_it7 <= ap_reg_ppstg_j_reg_235_pp0_it6;
                ap_reg_ppstg_j_reg_235_pp0_it8 <= ap_reg_ppstg_j_reg_235_pp0_it7;
                ap_reg_ppstg_j_reg_235_pp0_it9 <= ap_reg_ppstg_j_reg_235_pp0_it8;
                ap_reg_ppstg_p_Result_s_reg_650_pp0_it18 <= p_Result_s_reg_650;
                ap_reg_ppstg_tmp_reg_631_pp0_it10 <= ap_reg_ppstg_tmp_reg_631_pp0_it9;
                ap_reg_ppstg_tmp_reg_631_pp0_it11 <= ap_reg_ppstg_tmp_reg_631_pp0_it10;
                ap_reg_ppstg_tmp_reg_631_pp0_it12 <= ap_reg_ppstg_tmp_reg_631_pp0_it11;
                ap_reg_ppstg_tmp_reg_631_pp0_it13 <= ap_reg_ppstg_tmp_reg_631_pp0_it12;
                ap_reg_ppstg_tmp_reg_631_pp0_it14 <= ap_reg_ppstg_tmp_reg_631_pp0_it13;
                ap_reg_ppstg_tmp_reg_631_pp0_it15 <= ap_reg_ppstg_tmp_reg_631_pp0_it14;
                ap_reg_ppstg_tmp_reg_631_pp0_it16 <= ap_reg_ppstg_tmp_reg_631_pp0_it15;
                ap_reg_ppstg_tmp_reg_631_pp0_it17 <= ap_reg_ppstg_tmp_reg_631_pp0_it16;
                ap_reg_ppstg_tmp_reg_631_pp0_it18 <= ap_reg_ppstg_tmp_reg_631_pp0_it17;
                ap_reg_ppstg_tmp_reg_631_pp0_it19 <= ap_reg_ppstg_tmp_reg_631_pp0_it18;
                ap_reg_ppstg_tmp_reg_631_pp0_it2 <= ap_reg_ppstg_tmp_reg_631_pp0_it1;
                ap_reg_ppstg_tmp_reg_631_pp0_it20 <= ap_reg_ppstg_tmp_reg_631_pp0_it19;
                ap_reg_ppstg_tmp_reg_631_pp0_it21 <= ap_reg_ppstg_tmp_reg_631_pp0_it20;
                ap_reg_ppstg_tmp_reg_631_pp0_it3 <= ap_reg_ppstg_tmp_reg_631_pp0_it2;
                ap_reg_ppstg_tmp_reg_631_pp0_it4 <= ap_reg_ppstg_tmp_reg_631_pp0_it3;
                ap_reg_ppstg_tmp_reg_631_pp0_it5 <= ap_reg_ppstg_tmp_reg_631_pp0_it4;
                ap_reg_ppstg_tmp_reg_631_pp0_it6 <= ap_reg_ppstg_tmp_reg_631_pp0_it5;
                ap_reg_ppstg_tmp_reg_631_pp0_it7 <= ap_reg_ppstg_tmp_reg_631_pp0_it6;
                ap_reg_ppstg_tmp_reg_631_pp0_it8 <= ap_reg_ppstg_tmp_reg_631_pp0_it7;
                ap_reg_ppstg_tmp_reg_631_pp0_it9 <= ap_reg_ppstg_tmp_reg_631_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond_reg_700 <= exitcond_fu_533_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it16))) then
                isNeg_reg_660 <= sh_assign_fu_348_p2(11 downto 11);
                loc_V_1_reg_655 <= loc_V_1_fu_340_p1;
                p_Result_s_reg_650 <= p_Val2_1_fu_319_p1(63 downto 63);
                sh_assign_1_reg_665 <= sh_assign_1_fu_372_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then
                j_2_reg_626 <= j_2_fu_304_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it17))) then
                p_Val2_4_reg_670 <= p_Val2_4_fu_436_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it18))) then
                p_Val2_s_reg_676 <= p_Val2_s_fu_448_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it20) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it19))) then
                prevIndex_1_fu_132 <= p_Val2_s_reg_676;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond_fu_533_p2))) then
                tmp_10_reg_709 <= tmp_10_fu_554_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it22))) then
                tmp_17_reg_695 <= tmp_17_fu_510_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it6))) then
                tmp_2_reg_640 <= grp_fu_263_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it19))) then
                tmp_4_reg_682 <= tmp_4_fu_454_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it19)))) then
                tmp_5_reg_686 <= tmp_5_fu_466_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = exitcond1_fu_298_p2))) then
                tmp_reg_631 <= tmp_fu_310_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it15))) then
                x_assign_reg_645 <= grp_fu_258_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it23, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24, exitcond1_fu_298_p2, exitcond_fu_533_p2, exitcond_reg_700, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it23)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it23))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = exitcond1_fu_298_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_pp1_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_533_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_533_p2)))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                end if;
            when ap_ST_st29_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(vidInput_TVALID, ap_reg_ppstg_tmp_reg_631_pp0_it20, tmp_4_reg_682, tmp_5_reg_686)
    begin
                ap_sig_bdd_102 <= (((vidInput_TVALID = ap_const_logic_0) and (ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_4_reg_682)) or ((vidInput_TVALID = ap_const_logic_0) and not((ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_5_reg_686)));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_bdd_342 assign process. --
    ap_sig_bdd_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_342 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_2_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_3 assign process. --
    ap_sig_cseq_ST_st29_fsm_3_assign_proc : process(ap_sig_bdd_342)
    begin
        if (ap_sig_bdd_342) then 
            ap_sig_cseq_ST_st29_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_vidOutput_TREADY assign process. --
    ap_sig_ioackin_vidOutput_TREADY_assign_proc : process(vidOutput_TREADY, ap_reg_ioackin_vidOutput_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_vidOutput_TREADY)) then 
            ap_sig_ioackin_vidOutput_TREADY <= vidOutput_TREADY;
        else 
            ap_sig_ioackin_vidOutput_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- data_V_address0 assign process. --
    data_V_address0_assign_proc : process(ap_reg_ppiten_pp0_it22, ap_reg_ppstg_tmp_reg_631_pp0_it21, tmp_13_fu_491_p1, tmp_12_fu_500_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it22)) then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21))) then 
                data_V_address0 <= tmp_12_fu_500_p1(11 - 1 downto 0);
            elsif ((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21)) then 
                data_V_address0 <= tmp_13_fu_491_p1(11 - 1 downto 0);
            else 
                data_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            data_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- data_V_address1 assign process. --
    data_V_address1_assign_proc : process(ap_reg_ppiten_pp0_it23, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, tmp_14_fu_505_p1, tmp_9_fu_549_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            data_V_address1 <= tmp_9_fu_549_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it23)) then 
            data_V_address1 <= tmp_14_fu_505_p1(11 - 1 downto 0);
        else 
            data_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- data_V_ce0 assign process. --
    data_V_ce0_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24, ap_reg_ppstg_tmp_reg_631_pp0_it21)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21))))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_V_ce1 assign process. --
    data_V_ce1_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it23, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24, exitcond_reg_700, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it23) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))))) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_V_d0 assign process. --
    data_V_d0_assign_proc : process(ap_reg_ppiten_pp0_it22, ap_reg_ppstg_tmp_reg_631_pp0_it21, prevVal1_V_fu_140, prevVal2_V_fu_144)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it22)) then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21))) then 
                data_V_d0 <= prevVal2_V_fu_144;
            elsif ((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21)) then 
                data_V_d0 <= prevVal1_V_fu_140;
            else 
                data_V_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            data_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- data_V_we0 assign process. --
    data_V_we0_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24, ap_reg_ppstg_tmp_reg_631_pp0_it21)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_631_pp0_it21))))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_298_p2 <= "1" when (j_phi_fu_239_p4 = ap_const_lv11_438) else "0";
    exitcond_fu_533_p2 <= "1" when (j1_reg_247 = ap_const_lv12_870) else "0";

    -- grp_fu_258_ce assign process. --
    grp_fu_258_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then 
            grp_fu_258_ce <= ap_const_logic_1;
        else 
            grp_fu_258_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p0 <= tmp_2_reg_640;
    grp_fu_258_p1 <= ap_const_lv64_3FD2F684BDA12F68;

    -- grp_fu_263_ce assign process. --
    grp_fu_263_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p0 <= std_logic_vector(resize(unsigned(j_phi_fu_239_p4),32));
    grp_fu_277_p2 <= "1" when (line_r = ap_const_lv32_0) else "0";
    isNeg_fu_354_p3 <= sh_assign_fu_348_p2(11 downto 11);
    j_1_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(j1_reg_247));
    j_2_fu_304_p2 <= std_logic_vector(unsigned(j_phi_fu_239_p4) + unsigned(ap_const_lv11_1));

    -- j_phi_fu_239_p4 assign process. --
    j_phi_fu_239_p4_assign_proc : process(j_reg_235, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, exitcond1_reg_622, j_2_reg_626)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond1_reg_622))) then 
            j_phi_fu_239_p4 <= j_2_reg_626;
        else 
            j_phi_fu_239_p4 <= j_reg_235;
        end if; 
    end process;

    loc_V_1_fu_340_p1 <= p_Val2_1_fu_319_p1(52 - 1 downto 0);
    loc_V_fu_330_p4 <= p_Val2_1_fu_319_p1(62 downto 52);
    p_Result_1_fu_380_p3 <= (ap_const_lv1_1 & loc_V_1_reg_655);
    p_Val2_1_fu_319_p1 <= x_assign_reg_645;
    p_Val2_4_fu_436_p3 <= 
        tmp_19_fu_422_p1 when (isNeg_reg_660(0) = '1') else 
        tmp_20_fu_426_p4;
    p_Val2_7_i_i_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_reg_670));
    p_Val2_s_fu_448_p3 <= 
        p_Val2_7_i_i_fu_443_p2 when (ap_reg_ppstg_p_Result_s_reg_650_pp0_it18(0) = '1') else 
        p_Val2_4_reg_670;
        sh_assign_1_cast_fu_391_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_665),32));

    sh_assign_1_fu_372_p3 <= 
        tmp_i_i_cast_fu_368_p1 when (isNeg_fu_354_p3(0) = '1') else 
        sh_assign_fu_348_p2;
    sh_assign_fu_348_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast2_fu_344_p1));
    tmp_10_fu_554_p2 <= "1" when (j1_reg_247 = ap_const_lv12_86F) else "0";
    tmp_11_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(line_r));
    tmp_12_fu_500_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_j_reg_235_pp0_it21),64));
    tmp_13_fu_491_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_j_reg_235_pp0_it21),64));
    tmp_14_fu_505_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_j_reg_235_pp0_it22),64));
    tmp_16_fu_516_p1 <= std_logic_vector(resize(unsigned(grp_fu_277_p2),2));
    tmp_17_fu_510_p2 <= "1" when (ap_reg_ppstg_j_reg_235_pp0_it22 = ap_const_lv11_437) else "0";
    tmp_18_fu_521_p2 <= std_logic_vector(unsigned(line_r) + unsigned(ap_const_lv32_1));
    tmp_19_fu_422_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_414_p3),32));
    tmp_1_i_i_cast_fu_398_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_391_p1),53));
    tmp_1_i_i_fu_394_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_391_p1),136));
    tmp_20_fu_426_p4 <= tmp_4_i_i_fu_408_p2(83 downto 52);
    tmp_21_fu_539_p1 <= j1_reg_247(11 - 1 downto 0);
    tmp_25_fu_414_p3 <= tmp_2_i_i_fu_402_p2(52 downto 52);
    tmp_2_i_i_fu_402_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_380_p3),to_integer(unsigned('0' & tmp_1_i_i_cast_fu_398_p1(31-1 downto 0)))));
    tmp_3_fu_566_p1 <= std_logic_vector(resize(unsigned(grp_fu_277_p2),2));
    tmp_4_fu_454_p2 <= "1" when (p_Val2_s_reg_676 = prevIndex_fu_136) else "0";
    tmp_4_i_i_fu_408_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_387_p1),to_integer(unsigned('0' & tmp_1_i_i_fu_394_p1(31-1 downto 0)))));
    tmp_5_fu_466_p2 <= "1" when (prevIndex_1_fu_132 = prevIndex_fu_136) else "0";
    tmp_6_fu_583_p2 <= "1" when (signed(line_r) > signed(ap_const_lv32_3BF)) else "0";
    tmp_8_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv11_3C8) + unsigned(tmp_21_fu_539_p1));
    tmp_9_fu_549_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_543_p2),64));
    tmp_fu_310_p1 <= j_phi_fu_239_p4(1 - 1 downto 0);
    tmp_i_i_11_fu_362_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_330_p4));
        tmp_i_i_cast_fu_368_p1 <= std_logic_vector(resize(signed(tmp_i_i_11_fu_362_p2),12));

    tmp_i_i_fu_387_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_380_p3),136));
    tmp_i_i_i_cast2_fu_344_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_330_p4),12));

    -- vidInput_TREADY assign process. --
    vidInput_TREADY_assign_proc : process(ap_reg_ppstg_tmp_reg_631_pp0_it20, tmp_4_reg_682, tmp_5_reg_686, ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_sig_ioackin_vidOutput_TREADY, ap_reg_ppiten_pp0_it24)
    begin
        if ((((ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_4_reg_682) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))) or (not((ap_reg_ppstg_tmp_reg_631_pp0_it20 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_5_reg_686) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and not(((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_0 = ap_sig_ioackin_vidOutput_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24))))))) then 
            vidInput_TREADY <= ap_const_logic_1;
        else 
            vidInput_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    vidOutput_TDATA <= data_V_q1;
    vidOutput_TDEST <= ap_const_lv6_1;
    vidOutput_TID <= ap_const_lv5_0;
    vidOutput_TKEEP <= ap_const_lv2_1;

    -- vidOutput_TLAST assign process. --
    vidOutput_TLAST_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_reg_ppiten_pp0_it24, tmp_17_reg_695, exitcond_reg_700, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, tmp_10_reg_709)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            vidOutput_TLAST <= tmp_10_reg_709;
        elsif (((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21))))) then 
            vidOutput_TLAST <= tmp_17_reg_695;
        else 
            vidOutput_TLAST <= "X";
        end if; 
    end process;

    vidOutput_TSTRB <= ap_const_lv2_1;

    -- vidOutput_TUSER assign process. --
    vidOutput_TUSER_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_reg_ppiten_pp0_it24, exitcond_reg_700, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, tmp_16_fu_516_p1, tmp_3_fu_566_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            vidOutput_TUSER <= tmp_3_fu_566_p1;
        elsif (((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21))))) then 
            vidOutput_TUSER <= tmp_16_fu_516_p1;
        else 
            vidOutput_TUSER <= "XX";
        end if; 
    end process;


    -- vidOutput_TVALID assign process. --
    vidOutput_TVALID_assign_proc : process(ap_sig_bdd_102, ap_reg_ppiten_pp0_it21, ap_reg_ppstg_exitcond1_reg_622_pp0_it23, ap_reg_ppiten_pp0_it24, exitcond_reg_700, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_reg_ioackin_vidOutput_TREADY)
    begin
        if ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_622_pp0_it23) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21))) and (ap_const_logic_0 = ap_reg_ioackin_vidOutput_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_700) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_0 = ap_reg_ioackin_vidOutput_TREADY)))) then 
            vidOutput_TVALID <= ap_const_logic_1;
        else 
            vidOutput_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
